// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iWaiTLt8mAup4ReehswsSx
// Component: X1GyF0D52ux8

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import Link1 from "../../Link1"; // plasmic-import: Wk3pm7NzsIY9/component
import Link2 from "../../Link2"; // plasmic-import: f0ftlBRhAHPN/component
import Link3 from "../../Link3"; // plasmic-import: P6OuWwiFq4gQ/component
import Link4 from "../../Link4"; // plasmic-import: b5zzKfYNksQk/component
import Link5 from "../../Link5"; // plasmic-import: jy_zqM-l3sYE/component
import Link6 from "../../Link6"; // plasmic-import: qdfwHKfwtv8_/component
import Button from "../../Button"; // plasmic-import: f3lmI1Q2JQuQ/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import FooterMain from "../../FooterMain"; // plasmic-import: qoZVCK7paFuV/component
import { PlasmicHead } from "@plasmicapp/react-web";
import IconNavbar2 from "../../IconNavbar2"; // plasmic-import: 8dJjOz6ixDRs/component

import { useScreenVariants as useScreenVariantssppb0UOhrN5L } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Sppb0uOhrN5l/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: iWaiTLt8mAup4ReehswsSx/projectcss
import sty from "./PlasmicService.module.css"; // plasmic-import: X1GyF0D52ux8/css

import ProfileCircleSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__ProfileCircleSvgrepoCom1Svg"; // plasmic-import: 0qa3aoynIlk5/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: q0SxIWf05NzX/icon
import BestSellersvgIcon from "./icons/PlasmicIcon__BestSellersvg"; // plasmic-import: gEr3vmMDIr_A/icon
import MotorcyclesvgIcon from "./icons/PlasmicIcon__Motorcyclesvg"; // plasmic-import: bB21gLC1MPi2/icon
import PinsvgIcon from "./icons/PlasmicIcon__Pinsvg"; // plasmic-import: d5Rc8pnBZxlJ/icon
import ArrowLeftSvgrepoComsvgIcon from "./icons/PlasmicIcon__ArrowLeftSvgrepoComsvg"; // plasmic-import: n23QXdz0xMhj/icon
import ArrowOpenRightSvgrepoComsvgIcon from "./icons/PlasmicIcon__ArrowOpenRightSvgrepoComsvg"; // plasmic-import: bseFrujWYX3A/icon
import Service5SvgIcon from "./icons/PlasmicIcon__Service5Svg"; // plasmic-import: ZBTReqOjVgHb/icon
import Home8SvgrepoComsvgIcon from "./icons/PlasmicIcon__Home8SvgrepoComsvg"; // plasmic-import: -M_rLtuPSxCT/icon
import MotorcycleBikeSvgrepoComsvgIcon from "./icons/PlasmicIcon__MotorcycleBikeSvgrepoComsvg"; // plasmic-import: 8wmKCbwv8HSh/icon
import ChatRoundDotsSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__ChatRoundDotsSvgrepoCom1Svg"; // plasmic-import: 0ggQKe6ouxoP/icon
import UserSvgrepoComsvgIcon from "./icons/PlasmicIcon__UserSvgrepoComsvg"; // plasmic-import: xgFBstRMC0MY/icon

createPlasmicElementProxy;

export type PlasmicService__VariantMembers = {};
export type PlasmicService__VariantsArgs = {};
type VariantPropType = keyof PlasmicService__VariantsArgs;
export const PlasmicService__VariantProps = new Array<VariantPropType>();

export type PlasmicService__ArgsType = {};
type ArgPropType = keyof PlasmicService__ArgsType;
export const PlasmicService__ArgProps = new Array<ArgPropType>();

export type PlasmicService__OverridesType = {
  root?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
  link1?: Flex__<typeof Link1>;
  link2?: Flex__<typeof Link2>;
  link3?: Flex__<typeof Link3>;
  link4?: Flex__<typeof Link4>;
  link5?: Flex__<typeof Link5>;
  link6?: Flex__<typeof Link6>;
  h2?: Flex__<"h2">;
  embedHtml?: Flex__<typeof Embed>;
  clientsSection6?: Flex__<"div">;
  form2?: Flex__<typeof FormWrapper>;
  textArea?: Flex__<typeof AntdTextArea>;
  accordion2?: Flex__<typeof AntdAccordion>;
  accordion3?: Flex__<typeof AntdAccordion>;
  accordion4?: Flex__<typeof AntdAccordion>;
  footerMain?: Flex__<typeof FooterMain>;
  pageMetadataOverride?: Flex__<typeof PlasmicHead>;
  iconNavbar2?: Flex__<typeof IconNavbar2>;
};

export interface DefaultServiceProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicService__RenderFunc(props: {
  variants: PlasmicService__VariantsArgs;
  args: PlasmicService__ArgsType;
  overrides: PlasmicService__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "accordion2.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "accordion3.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "accordion4.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssppb0UOhrN5L()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicService.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicService.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicService.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicService.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicService.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicService.pageMetadata.description}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section className={classNames(projectcss.all, sty.section__eavoz)}>
            <NavigationBar
              data-plasmic-name={"navigationBar"}
              data-plasmic-override={overrides.navigationBar}
              brand={
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__oWas6
                  )}
                  component={Link}
                  href={`/`}
                  platform={"nextjs"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__yxRwa)}
                    displayHeight={"100px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={{
                      src: "/plasmic/uwinfly/images/logopng.png",
                      fullWidth: 512,
                      fullHeight: 512,
                      aspectRatio: undefined
                    }}
                  />
                </PlasmicLink__>
              }
              className={classNames("__wab_instance", sty.navigationBar)}
              closeButton={
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__cHqVp)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "20px"
                      : "auto"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "20px"
                      : "auto"
                  }
                  src={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? {
                          src: "/plasmic/uwinfly/images/_3F1C0155019E22Ca2146D6372Fa054D8Svg.svg",
                          fullWidth: 150,
                          fullHeight: 150,
                          aspectRatio: 1
                        }
                      : "https://static1.plasmic.app/close.svg"
                  }
                />
              }
              forceOpenMenu={
                hasVariant(globalVariants, "screen", "mobile")
                  ? false
                  : undefined
              }
              itemsGap={hasVariant(globalVariants, "screen", "mobile") ? 8 : 8}
              menuItems={
                <React.Fragment>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__nr3Hq
                    )}
                    component={Link}
                    href={`/`}
                    platform={"nextjs"}
                  >
                    <Link1
                      data-plasmic-name={"link1"}
                      data-plasmic-override={overrides.link1}
                      className={classNames("__wab_instance", sty.link1)}
                    />
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__fQk0I
                    )}
                    component={Link}
                    href={`/about-us`}
                    platform={"nextjs"}
                  >
                    <Link2
                      data-plasmic-name={"link2"}
                      data-plasmic-override={overrides.link2}
                      className={classNames("__wab_instance", sty.link2)}
                    />
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__hIeoS
                    )}
                    component={Link}
                    href={`/Mitra`}
                    platform={"nextjs"}
                  >
                    <Link3
                      data-plasmic-name={"link3"}
                      data-plasmic-override={overrides.link3}
                      className={classNames("__wab_instance", sty.link3)}
                    />
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__bUxkh
                    )}
                    component={Link}
                    href={`/Blog`}
                    platform={"nextjs"}
                  >
                    <Link4
                      data-plasmic-name={"link4"}
                      data-plasmic-override={overrides.link4}
                      className={classNames("__wab_instance", sty.link4)}
                    />
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___9Uuve
                    )}
                    component={Link}
                    href={`/persyaratan`}
                    platform={"nextjs"}
                  >
                    <Link5
                      data-plasmic-name={"link5"}
                      data-plasmic-override={overrides.link5}
                      className={classNames("__wab_instance", sty.link5)}
                    />
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__eQvhX
                    )}
                    component={Link}
                    href={`/Kontak-kami`}
                    platform={"nextjs"}
                  >
                    <Link6
                      data-plasmic-name={"link6"}
                      data-plasmic-override={overrides.link6}
                      className={classNames("__wab_instance", sty.link6)}
                    />
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___8NrBy
                    )}
                    component={Link}
                    href={`/Profile`}
                    platform={"nextjs"}
                  >
                    <ProfileCircleSvgrepoCom1SvgIcon
                      className={classNames(projectcss.all, sty.svg__thmUs)}
                      role={"img"}
                    />
                  </PlasmicLink__>
                </React.Fragment>
              }
              openButton={
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___1GCIo)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "25px"
                      : "35px"
                  }
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  src={{
                    src: "/plasmic/uwinfly/images/iconsvg.svg",
                    fullWidth: 231,
                    fullHeight: 150,
                    aspectRatio: 1.537966
                  }}
                />
              }
              responsiveBreakpoint={768}
            />

            <section
              className={classNames(projectcss.all, sty.section___3T4Gr)}
            >
              <div className={classNames(projectcss.all, sty.columns___3XTud)}>
                <div
                  className={classNames(projectcss.all, sty.column___4Ay5B)}
                />

                <div
                  className={classNames(projectcss.all, sty.column__kDyh1)}
                />
              </div>
            </section>
          </section>
          <section className={classNames(projectcss.all, sty.section___4IQwF)}>
            <div className={classNames(projectcss.all, sty.columns___6Bz5K)}>
              <div className={classNames(projectcss.all, sty.column__cZjgn)}>
                <Button
                  className={classNames("__wab_instance", sty.button__euan7)}
                  showStartIcon={true}
                >
                  {"Best seller"}
                </Button>
              </div>
              <div className={classNames(projectcss.all, sty.column__bWzoK)}>
                <Button
                  className={classNames("__wab_instance", sty.button__mTyI7)}
                  showStartIcon={true}
                  startIcon={
                    <BestSellersvgIcon
                      className={classNames(projectcss.all, sty.svg__aBI8)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lxmHi
                    )}
                  >
                    {"Best seller"}
                  </div>
                </Button>
              </div>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.column__uWccz
                )}
                component={Link}
                href={`/Produk`}
                platform={"nextjs"}
              >
                <Button
                  className={classNames("__wab_instance", sty.button__r9WFu)}
                  showStartIcon={true}
                  startIcon={
                    <MotorcyclesvgIcon
                      className={classNames(projectcss.all, sty.svg__uzqcm)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vIVp
                    )}
                  >
                    {"Produk"}
                  </div>
                </Button>
              </PlasmicLink__>
              <div className={classNames(projectcss.all, sty.column__h4SOa)}>
                <Button
                  className={classNames("__wab_instance", sty.button___70SaH)}
                  link={`/Service`}
                  showStartIcon={true}
                  startIcon={
                    <PinsvgIcon
                      className={classNames(projectcss.all, sty.svg__iRgJi)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2Xy
                    )}
                  >
                    {"Service"}
                  </div>
                </Button>
              </div>
            </div>
          </section>
          <section className={classNames(projectcss.all, sty.section__kENc)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__dAiJf)}
            >
              <div className={classNames(projectcss.all, sty.column__qlZqo)}>
                <Button
                  className={classNames("__wab_instance", sty.button__hyJxo)}
                  showStartIcon={true}
                  startIcon={
                    <BestSellersvgIcon
                      className={classNames(projectcss.all, sty.svg__t0LgU)}
                      role={"img"}
                    />
                  }
                >
                  {"Best seller"}
                </Button>
              </div>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.column__itKh8
                )}
                component={Link}
                href={`/Produk`}
                platform={"nextjs"}
              >
                <Button
                  className={classNames("__wab_instance", sty.button__xYx6G)}
                  showStartIcon={true}
                  startIcon={
                    <MotorcyclesvgIcon
                      className={classNames(projectcss.all, sty.svg___5Kv7Q)}
                      role={"img"}
                    />
                  }
                >
                  {"Produk"}
                </Button>
              </PlasmicLink__>
              <div className={classNames(projectcss.all, sty.column__uirxo)}>
                <Button
                  className={classNames("__wab_instance", sty.button__hVzNp)}
                  link={`/Service`}
                  showStartIcon={true}
                  startIcon={
                    <PinsvgIcon
                      className={classNames(projectcss.all, sty.svg__vSzBw)}
                      role={"img"}
                    />
                  }
                >
                  {"Service"}
                </Button>
              </div>
            </Stack__>
          </section>
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <div className={classNames(projectcss.all, sty.columns__iPz6A)}>
              <div className={classNames(projectcss.all, sty.column___3AzZu)}>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__bQk2J
                  )}
                  component={Link}
                  href={`/`}
                  platform={"nextjs"}
                >
                  <ArrowLeftSvgrepoComsvgIcon
                    className={classNames(projectcss.all, sty.svg__o8Job)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eufYa
                    )}
                  >
                    {"  Balik Menu"}
                  </div>
                </PlasmicLink__>
              </div>
              <div className={classNames(projectcss.all, sty.column___5NaqB)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__w0IoD
                  )}
                >
                  {"Januari 24, 2024"}
                </div>
              </div>
            </div>
          ) : null}
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <div className={classNames(projectcss.all, sty.columns__goPb)}>
              <div className={classNames(projectcss.all, sty.column__ltNAy)}>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__zU4C
                  )}
                  component={Link}
                  href={`/`}
                  platform={"nextjs"}
                >
                  <ArrowLeftSvgrepoComsvgIcon
                    className={classNames(projectcss.all, sty.svg__daLky)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1RIxw
                    )}
                  >
                    {"  Balik Menu"}
                  </div>
                </PlasmicLink__>
              </div>
              <div className={classNames(projectcss.all, sty.column___5Gkt7)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7Eols
                  )}
                >
                  {"Januari 24, 2024"}
                </div>
              </div>
            </div>
          ) : null}
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <section className={classNames(projectcss.all, sty.section__zIjkq)}>
              <div className={classNames(projectcss.all, sty.columns__cXwNd)}>
                <div className={classNames(projectcss.all, sty.column__cTsTw)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fqy2H
                    )}
                  >
                    {"Pertanyaan sering di ajukan ?"}
                  </div>
                  <ArrowOpenRightSvgrepoComsvgIcon
                    className={classNames(projectcss.all, sty.svg___2J1Tl)}
                    role={"img"}
                  />
                </div>
              </div>
              <section
                className={classNames(projectcss.all, sty.section__dVx4D)}
              >
                <div className={classNames(projectcss.all, sty.columns__f93AC)}>
                  <div
                    className={classNames(projectcss.all, sty.column__n5Rac)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wgb6E
                      )}
                    >
                      {"Pertanyaan sering di ajukan ?"}
                    </div>
                    <ArrowOpenRightSvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__xZgBl)}
                      role={"img"}
                    />
                  </div>
                </div>
              </section>
            </section>
          ) : null}
          <section className={classNames(projectcss.all, sty.section___1Zx6X)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ej2Zt
              )}
            >
              {"Kontak kami"}
            </div>
          </section>
          <div className={classNames(projectcss.all, sty.freeBox__fAIe)}>
            <div className={classNames(projectcss.all, sty.freeBox__nfahD)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__wENax)}
              >
                <div className={classNames(projectcss.all, sty.column___9ERr2)}>
                  <PlasmicIcon__
                    PlasmicIconType={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? Service5SvgIcon
                        : Service5SvgIcon
                    }
                    className={classNames(projectcss.all, sty.svg__rnniV)}
                    role={"img"}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__mreNq)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__zhoNe)}
                  >
                    <h2
                      data-plasmic-name={"h2"}
                      data-plasmic-override={overrides.h2}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile")
                        ? "Shop drive uwinfly"
                        : "Shop drive uwinfly"}
                    </h2>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aoXx
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile")
                        ? "Kami menawarkan berbagai  seperpart uwinfly dan tersedia dalam berbagai type motor dan spesifikasi sesuai kebutuhan motor anda. dapatkan pelayanan terbaik dari teknisi ahli kami yang siap membantu anda dalam memilih dan memasang seperpart motor dengan cepat dan profesional. Jangan ragu untuk menghubungi kami."
                        : "Kami menawarkan berbagai  seperpart uwinfly dan tersedia dalam berbagai type motor dan spesifikasi sesuai kebutuhan motor anda. dapatkan pelayanan terbaik dari teknisi ahli kami yang siap membantu anda dalam memilih dan memasang seperpart motor dengan cepat dan profesional. Jangan ragu untuk menghubungi kami."}
                    </div>
                    <section
                      className={classNames(projectcss.all, sty.section__njhqm)}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__lKxEg
                        )}
                      >
                        {"Daftar sekarang"}
                      </Button>
                    </section>
                  </Stack__>
                </div>
              </Stack__>
            </div>
          </div>
          <section className={classNames(projectcss.all, sty.section__bGf52)}>
            <section className={classNames(projectcss.all, sty.section__sQnKr)}>
              <section
                className={classNames(projectcss.all, sty.section__jPnk0)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobile") ? true : false
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4WdD
                    )}
                  >
                    {
                      " Telah menghubungi kami mohon menunggu 1x24 jam Admin kami akan membalas anda."
                    }
                  </div>
                ) : null}
                <Embed
                  data-plasmic-name={"embedHtml"}
                  data-plasmic-override={overrides.embedHtml}
                  className={classNames("__wab_instance", sty.embedHtml)}
                  code={
                    '<script src="https://cdn02.jotfor.ms/static/prototype.forms.js?v=3.3.52788" type="text/javascript"></script>\r\n<script src="https://cdn03.jotfor.ms/static/jotform.forms.js?v=3.3.52788" type="text/javascript"></script>\r\n<script src="https://cdn01.jotfor.ms/js/vendor/maskedinput_5.0.9.min.js?v=3.3.52788" type="text/javascript"></script>\r\n<script src="https://cdn02.jotfor.ms/js/vendor/imageinfo.js?v=3.3.52788" type="text/javascript"></script>\r\n<script src="https://cdn03.jotfor.ms/file-uploader/fileuploader.js?v=3.3.52788" type="text/javascript"></script>\r\n<script src="https://cdn01.jotfor.ms/s/umd/7cdb62f0ddf/for-form-branding-footer.js?v=3.3.52788" type="text/javascript" defer></script>\r\n<script src="https://cdn01.jotfor.ms/js/vendor/smoothscroll.min.js?v=3.3.52788" type="text/javascript"></script>\r\n<script src="https://cdn02.jotfor.ms/js/errorNavigation.js?v=3.3.52788" type="text/javascript"></script>\r\n<script type="text/javascript">\tJotForm.newDefaultTheme = true;\r\n\tJotForm.extendsNewTheme = false;\r\n\tJotForm.singleProduct = false;\r\n\tJotForm.newPaymentUIForNewCreatedForms = true;\r\n\tJotForm.texts = {"confirmEmail":"E-mail does not match","pleaseWait":"Please wait...","validateEmail":"You need to validate this e-mail","confirmClearForm":"Are you sure you want to clear the form","lessThan":"Your score should be less than or equal to","incompleteFields":"There are incomplete required fields. Please complete them.","required":"This field is required.","requireOne":"At least one field required.","requireEveryRow":"Every row is required.","requireEveryCell":"Every cell is required.","email":"Enter a valid e-mail address","alphabetic":"This field can only contain letters","numeric":"This field can only contain numeric values","alphanumeric":"This field can only contain letters and numbers.","cyrillic":"This field can only contain cyrillic characters","url":"This field can only contain a valid URL","currency":"This field can only contain currency values.","fillMask":"Field value must fill mask.","uploadExtensions":"You can only upload following files:","noUploadExtensions":"File has no extension file type (e.g. .txt, .png, .jpeg)","uploadFilesize":"File size cannot be bigger than:","uploadFilesizemin":"File size cannot be smaller than:","gradingScoreError":"Score total should only be less than or equal to","inputCarretErrorA":"Input should not be less than the minimum value:","inputCarretErrorB":"Input should not be greater than the maximum value:","maxDigitsError":"The maximum digits allowed is","minCharactersError":"The number of characters should not be less than the minimum value:","maxCharactersError":"The number of characters should not be more than the maximum value:","freeEmailError":"Free email accounts are not allowed","minSelectionsError":"The minimum required number of selections is ","maxSelectionsError":"The maximum number of selections allowed is ","pastDatesDisallowed":"Date must not be in the past.","dateLimited":"This date is unavailable.","dateInvalid":"This date is not valid. The date format is {format}","dateInvalidSeparate":"This date is not valid. Enter a valid {element}.","ageVerificationError":"You must be older than {minAge} years old to submit this form.","multipleFileUploads_typeError":"{file} has invalid extension. Only {extensions} are allowed.","multipleFileUploads_sizeError":"{file} is too large, maximum file size is {sizeLimit}.","multipleFileUploads_minSizeError":"{file} is too small, minimum file size is {minSizeLimit}.","multipleFileUploads_emptyError":"{file} is empty, please select files again without it.","multipleFileUploads_uploadFailed":"File upload failed, please remove it and upload the file again.","multipleFileUploads_onLeave":"The files are being uploaded, if you leave now the upload will be cancelled.","multipleFileUploads_fileLimitError":"Only {fileLimit} file uploads allowed.","dragAndDropFilesHere_infoMessage":"Drag and drop files here","chooseAFile_infoMessage":"Choose a file","maxFileSize_infoMessage":"Max. file size","generalError":"There are errors on the form. Please fix them before continuing.","generalPageError":"There are errors on this page. Please fix them before continuing.","wordLimitError":"Too many words. The limit is","wordMinLimitError":"Too few words.  The minimum is","characterLimitError":"Too many Characters.  The limit is","characterMinLimitError":"Too few characters. The minimum is","ccInvalidNumber":"Credit Card Number is invalid.","ccInvalidCVC":"CVC number is invalid.","ccInvalidExpireDate":"Expire date is invalid.","ccInvalidExpireMonth":"Expiration month is invalid.","ccInvalidExpireYear":"Expiration year is invalid.","ccMissingDetails":"Please fill up the credit card details.","ccMissingProduct":"Please select at least one product.","ccMissingDonation":"Please enter numeric values for donation amount.","disallowDecimals":"Please enter a whole number.","restrictedDomain":"This domain is not allowed","ccDonationMinLimitError":"Minimum amount is {minAmount} {currency}","requiredLegend":"All fields marked with * are required and must be filled.","geoPermissionTitle":"Permission Denied","geoPermissionDesc":"Check your browser\'s privacy settings.","geoNotAvailableTitle":"Position Unavailable","geoNotAvailableDesc":"Location provider not available. Please enter the address manually.","geoTimeoutTitle":"Timeout","geoTimeoutDesc":"Please check your internet connection and try again.","selectedTime":"Selected Time","formerSelectedTime":"Former Time","cancelAppointment":"Cancel Appointment","cancelSelection":"Cancel Selection","noSlotsAvailable":"No slots available","slotUnavailable":"{time} on {date} has been selected is unavailable. Please select another slot.","multipleError":"There are {count} errors on this page. Please correct them before moving on.","oneError":"There is {count} error on this page. Please correct it before moving on.","doneMessage":"Well done! All errors are fixed.","invalidTime":"Enter a valid time","doneButton":"Done","reviewSubmitText":"Review and Submit","nextButtonText":"Next","prevButtonText":"Previous","seeErrorsButton":"See Errors","notEnoughStock":"Not enough stock for the current selection","notEnoughStock_remainedItems":"Not enough stock for the current selection ({count} items left)","soldOut":"Sold Out","justSoldOut":"Just Sold Out","selectionSoldOut":"Selection Sold Out","subProductItemsLeft":"({count} items left)","startButtonText":"START","submitButtonText":"Submit","submissionLimit":"Sorry! Only one entry is allowed. Multiple submissions are disabled for this form.","reviewBackText":"Back to Form","seeAllText":"See All","progressMiddleText":"of","fieldError":"field has an error.","error":"Error"};\r\n\tJotForm.newPaymentUI = true;\r\n\tJotForm.replaceTagTest = true;\r\n\tJotForm.clearFieldOnHide="disable";\r\n\tJotForm.submitError="jumpToFirstError";\r\n\twindow.addEventListener(\'DOMContentLoaded\',function(){window.brandingFooter.init({"formID":240850312017444,"campaign":"powered_by_jotform_le","isCardForm":false,"isLegacyForm":true})});\tJotForm.isFullSource = true;\r\n\r\n      try{\r\n        var isEUDomain = /(?:eu.jotform)|(?:jotformeu.com)/.test(window.location.host);\r\n        var isHipaaDomain = /(?:hipaa.jotform)/.test(window.location.host);\r\n        var isProhibitedParameterExists = /(?:wfTaskID|PCI_preSubmitRequest|wfTaskType)/.test(window.location.search);\r\n        var isEditMode = JotForm.isEditMode();\r\n        if (!isEUDomain && !isHipaaDomain && !isProhibitedParameterExists && !isEditMode) {\r\n          var sesApiUrl = /jotform.pro/.test(window.location.host) ? \'/API\' : \'https://api.jotform.com\';\r\n          function sendOpenId(uuid, eventType) {\r\n            navigator.sendBeacon(sesApiUrl + \'/form/\' + 240850312017444 + \'/event/\' + uuid + \'/\' + eventType, {});\r\n          }\r\n          var formOpenId = \'\';\r\n          if (window.crypto) {\r\n            formOpenId = window.crypto.getRandomValues(new BigUint64Array(1)).toString();\r\n          } else {\r\n            formOpenId = (Math.random() * 16).toString(16).slice(2);\r\n          }\r\n          sendOpenId = sendOpenId.bind(this, formOpenId);\r\n          function sendOpenIdOnSubmit() {\r\n            var currentForm = $(\'240850312017444\');\r\n            currentForm.addEventListener(\'submit\', function() { sendOpenId(\'clientSubmitClick_V5\'); });\r\n            var openIdInput = currentForm.querySelector(\'[name="formOpenId_V5"]\');\r\n            if (!openIdInput) {\r\n              openIdInput = document.createElement(\'input\');\r\n              openIdInput.setAttribute(\'type\', \'hidden\');\r\n              openIdInput.setAttribute(\'name\', \'formOpenId_V5\');\r\n              currentForm.appendChild(openIdInput);\r\n            }\r\n            openIdInput.value = formOpenId;\r\n          }\r\n          sendOpenId(\'clientFormView_V5\');\r\n          if (document.readyState == \'complete\' || (this.jsForm && (document.readyState === undefined || document.readyState === \'interactive\'))) {\r\n              sendOpenIdOnSubmit();\r\n          } else {\r\n              document.ready(sendOpenIdOnSubmit);\r\n          }\r\n        }\r\n      } catch(openIdBlockError) {\r\n        console.log(openIdBlockError);\r\n      }\r\n    \r\n\tJotForm.init(function(){\r\n\t/*INIT-START*/\r\nif (window.JotForm && JotForm.accessible) $(\'input_3\').setAttribute(\'tabindex\',0);\r\n\r\n JotForm.calendarMonths = ["January","February","March","April","May","June","July","August","September","October","November","December"];\r\n if (!JotForm.calenderViewMonths) JotForm.calenderViewMonths = {};  JotForm.calenderViewMonths[11] = ["January","February","March","April","May","June","July","August","September","October","November","December"];\r\n if (!JotForm.calenderViewDays) JotForm.calenderViewDays = {};  JotForm.calenderViewDays[11] = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"];\r\n JotForm.calendarDays = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"];\r\n JotForm.calendarOther = {"today":"Today"};\r\n var languageOptions = document.querySelectorAll(\'#langList li\'); \r\n for(var langIndex = 0; langIndex < languageOptions.length; langIndex++) { \r\n   languageOptions[langIndex].on(\'click\', function(e) { setTimeout(function(){ JotForm.setCalendar("11", false, {"days":{"monday":true,"tuesday":true,"wednesday":true,"thursday":true,"friday":true,"saturday":true,"sunday":true},"future":true,"past":true,"custom":false,"ranges":false,"start":"","end":"","countSelectedDaysOnly":false}); }, 0); });\r\n } \r\n JotForm.onTranslationsFetch(function() { JotForm.setCalendar("11", false, {"days":{"monday":true,"tuesday":true,"wednesday":true,"thursday":true,"friday":true,"saturday":true,"sunday":true},"future":true,"past":true,"custom":false,"ranges":false,"start":"","end":"","countSelectedDaysOnly":false}); });\r\nif (window.JotForm && JotForm.accessible) $(\'input_22\').setAttribute(\'tabindex\',0);\r\nif (window.JotForm && JotForm.accessible) $(\'input_17\').setAttribute(\'tabindex\',0);\r\n      JotForm.alterTexts({"ageVerificationError":"You must be older than {minAge} years old to submit this form.","alphabetic":"This field can only contain letters","alphanumeric":"This field can only contain letters and numbers.","cancelAppointment":"Cancel Appointment","cancelSelection":"Cancel Selection","ccDonationMinLimitError":"Minimum amount is {minAmount} {currency}","ccInvalidCVC":"CVC number is invalid.","ccInvalidExpireDate":"Expire date is invalid.","ccInvalidExpireMonth":"Expiration month is invalid.","ccInvalidExpireYear":"Expiration year is invalid.","ccInvalidNumber":"Credit Card Number is invalid.","ccMissingDetails":"Please fill up the credit card details.","ccMissingDonation":"Please enter numeric values for donation amount.","ccMissingProduct":"Please select at least one product.","characterLimitError":"Too many Characters.  The limit is","characterMinLimitError":"Too few characters. The minimum is","chooseAFile_infoMessage":"Choose a file","confirmClearForm":"Are you sure you want to clear the form","confirmEmail":"E-mail does not match","currency":"This field can only contain currency values.","cyrillic":"This field can only contain cyrillic characters","dateInvalid":"This date is not valid. The date format is {format}","dateInvalidSeparate":"This date is not valid. Enter a valid {element}.","dateLimited":"This date is unavailable.","disallowDecimals":"Please enter a whole number.","doneButton":"Done","doneMessage":"Well done! All errors are fixed.","dragAndDropFilesHere_infoMessage":"Drag and drop files here","email":"Enter a valid e-mail address","error":"Error","fieldError":"field has an error.","fillMask":"Field value must fill mask.","formerSelectedTime":"Former Time","freeEmailError":"Free email accounts are not allowed","generalError":"There are errors on the form. Please fix them before continuing.","generalPageError":"There are errors on this page. Please fix them before continuing.","geoNotAvailableDesc":"Location provider not available. Please enter the address manually.","geoNotAvailableTitle":"Position Unavailable","geoPermissionDesc":"Check your browser\'s privacy settings.","geoPermissionTitle":"Permission Denied","geoTimeoutDesc":"Please check your internet connection and try again.","geoTimeoutTitle":"Timeout","gradingScoreError":"Score total should only be less than or equal to","incompleteFields":"There are incomplete required fields. Please complete them.","inputCarretErrorA":"Input should not be less than the minimum value:","inputCarretErrorB":"Input should not be greater than the maximum value:","invalidTime":"Enter a valid time","justSoldOut":"Just Sold Out","lessThan":"Your score should be less than or equal to","maxCharactersError":"The number of characters should not be more than the maximum value:","maxDigitsError":"The maximum digits allowed is","maxFileSize_infoMessage":"Max. file size","maxSelectionsError":"The maximum number of selections allowed is ","minCharactersError":"The number of characters should not be less than the minimum value:","minSelectionsError":"The minimum required number of selections is ","multipleError":"There are {count} errors on this page. Please correct them before moving on.","multipleFileUploads_emptyError":"{file} is empty, please select files again without it.","multipleFileUploads_fileLimitError":"Only {fileLimit} file uploads allowed.","multipleFileUploads_minSizeError":"{file} is too small, minimum file size is {minSizeLimit}.","multipleFileUploads_onLeave":"The files are being uploaded, if you leave now the upload will be cancelled.","multipleFileUploads_sizeError":"{file} is too large, maximum file size is {sizeLimit}.","multipleFileUploads_typeError":"{file} has invalid extension. Only {extensions} are allowed.","multipleFileUploads_uploadFailed":"File upload failed, please remove it and upload the file again.","nextButtonText":"Next","noSlotsAvailable":"No slots available","notEnoughStock":"Not enough stock for the current selection","notEnoughStock_remainedItems":"Not enough stock for the current selection ({count} items left)","noUploadExtensions":"File has no extension file type (e.g. .txt, .png, .jpeg)","numeric":"This field can only contain numeric values","oneError":"There is {count} error on this page. Please correct it before moving on.","pastDatesDisallowed":"Date must not be in the past.","pleaseWait":"Please wait...","prevButtonText":"Previous","progressMiddleText":"of","required":"This field is required.","requiredLegend":"All fields marked with * are required and must be filled.","requireEveryCell":"Every cell is required.","requireEveryRow":"Every row is required.","requireOne":"At least one field required.","restrictedDomain":"This domain is not allowed","reviewBackText":"Back to Form","reviewSubmitText":"Review and Submit","seeAllText":"See All","seeErrorsButton":"See Errors","selectedTime":"Selected Time","selectionSoldOut":"Selection Sold Out","slotUnavailable":"{time} on {date} has been selected is unavailable. Please select another slot.","soldOut":"Sold Out","startButtonText":"START","submissionLimit":"Sorry! Only one entry is allowed. Multiple submissions are disabled for this form.","submitButtonText":"Submit","subProductItemsLeft":"({count} items left)","uploadExtensions":"You can only upload following files:","uploadFilesize":"File size cannot be bigger than:","uploadFilesizemin":"File size cannot be smaller than:","url":"This field can only contain a valid URL","validateEmail":"You need to validate this e-mail","wordLimitError":"Too many words. The limit is","wordMinLimitError":"Too few words.  The minimum is"});\r\n      setTimeout(function() {\r\n          JotForm.initMultipleUploads();\r\n      }, 2);\r\n\t/*INIT-END*/\r\n\t});\r\n\r\n   setTimeout(function() {\r\nJotForm.paymentExtrasOnTheFly([null,{"name":"heading","qid":"1","text":"Service","type":"control_head"},{"name":"submit2","qid":"2","text":"Service","type":"control_button"},{"description":"","name":"nama","qid":"3","subLabel":"","text":"Nama","type":"control_textbox"},{"description":"","name":"jenisKelamin","qid":"4","text":"Jenis kelamin","type":"control_radio"},null,null,null,{"description":"","name":"typeMotor","qid":"8","subLabel":"","text":"Type motor ","type":"control_dropdown"},null,{"description":"","name":"telepon10","qid":"10","subLabel":"","text":"Telepon \\u002F Whats app","type":"control_number"},{"description":"","name":"tanggalService","qid":"11","text":"Tanggal service","type":"control_datetime"},null,null,null,{"description":"","name":"typeA15","qid":"15","text":"Konfirmasi","type":"control_checkbox"},{"description":"","name":"fotoKendala","qid":"16","subLabel":"","text":"Foto Kendala motor ","type":"control_fileupload"},{"description":"","mde":"No","name":"catatanKendala","qid":"17","subLabel":"","text":"Catatan kendala motor ","type":"control_textarea","wysiwyg":"Disable"},null,null,null,null,{"description":"","name":"lokasi","qid":"22","subLabel":"","text":"Lokasi","type":"control_textbox"}]);}, 20); \r\n</script>\r\n<link type="text/css" rel="stylesheet" href="https://cdn01.jotfor.ms/stylebuilder/static/form-common.css?v=d0f72cd\r\n"/>\r\n<style type="text/css">@media print{*{-webkit-print-color-adjust: exact !important;color-adjust: exact !important;}.form-section{display:inline!important}.form-pagebreak{display:none!important}.form-section-closed{height:auto!important}.page-section{position:initial!important}}</style>\r\n<link id="custom-font" type="text/css" rel="stylesheet" href="//cdn.jotfor.ms/fonts/?family=Roboto" />\r\n<link type="text/css" rel="stylesheet" href="https://cdn02.jotfor.ms/themes/CSS/5e6b428acc8c4e222d1beb91.css?v=3.3.52788"/>\r\n<link type="text/css" rel="stylesheet" href="https://cdn03.jotfor.ms/css/styles/payment/payment_styles.css?3.3.52788" />\r\n<link type="text/css" rel="stylesheet" href="https://cdn01.jotfor.ms/css/styles/payment/payment_feature.css?3.3.52788" />\r\n<style type="text/css" id="form-designer-style">\r\n    /* Injected CSS Code */\r\n/*PREFERENCES STYLE*/\r\n    .form-all {\r\n      font-family: Roboto, sans-serif;\r\n    }\r\n  \r\n    .form-label.form-label-auto {\r\n      \r\n    display: block;\r\n    float: none;\r\n    text-align: left;\r\n    width: 100%;\r\n  \r\n    }\r\n  \r\n    .form-line {\r\n      margin-top: 12px;\r\n      margin-bottom: 12px;\r\n    }\r\n  \r\n    .form-all {\r\n      max-width: 752px;\r\n      width: 100%;\r\n    }\r\n  \r\n    .form-label.form-label-left,\r\n    .form-label.form-label-right,\r\n    .form-label.form-label-left.form-label-auto,\r\n    .form-label.form-label-right.form-label-auto {\r\n      width: 230px;\r\n    }\r\n  \r\n    .form-all {\r\n      font-size: 16px\r\n    }\r\n  \r\n    .supernova .form-all, .form-all {\r\n      background-color: #FFFFFF;\r\n    }\r\n  \r\n    .form-all {\r\n      color: #2C3345;\r\n    }\r\n    .form-header-group .form-header {\r\n      color: #2C3345;\r\n    }\r\n    .form-header-group .form-subHeader {\r\n      color: #2C3345;\r\n    }\r\n    .form-label-top,\r\n    .form-label-left,\r\n    .form-label-right,\r\n    .form-html,\r\n    .form-checkbox-item label,\r\n    .form-radio-item label,\r\n    span.FITB .qb-checkbox-label,\r\n    span.FITB .qb-radiobox-label,\r\n    span.FITB .form-radio label,\r\n    span.FITB .form-checkbox label,\r\n    [data-blotid][data-type=checkbox] [data-labelid],\r\n    [data-blotid][data-type=radiobox] [data-labelid],\r\n    span.FITB-inptCont[data-type=checkbox] label,\r\n    span.FITB-inptCont[data-type=radiobox] label {\r\n      color: #2C3345;\r\n    }\r\n    .form-sub-label {\r\n      color: #464d5f;\r\n    }\r\n  \r\n  .supernova {\r\n    background-color: #ffffff;\r\n  }\r\n  .supernova body {\r\n    background: transparent;\r\n  }\r\n  \r\n    .form-textbox,\r\n    .form-textarea,\r\n    .form-dropdown,\r\n    .form-radio-other-input,\r\n    .form-checkbox-other-input,\r\n    .form-captcha input,\r\n    .form-spinner input {\r\n      background-color: #FFFFFF;\r\n    }\r\n  \r\n      \r\n    .supernova {\r\n      background-repeat: no-repeat;\r\n      background-size:cover;\r\n      background-attachment: fixed;\r\n      background-position: center top;\r\n    }\r\n\r\n      .supernova, #stage {\r\n        background-image: none;\r\n      }\r\n    \r\n      .form-all {\r\n        background-image: none;\r\n      }\r\n    /*PREFERENCES STYLE*//*__INSPECT_SEPERATOR__*/\r\n    /* Injected CSS Code */\r\n</style>\r\n\r\n<form class="jotform-form" onsubmit="return typeof testSubmitFunction !== \'undefined\' && testSubmitFunction();" action="https://submit.jotform.com/submit/240850312017444" method="post" enctype="multipart/form-data" name="form_240850312017444" id="240850312017444" accept-charset="utf-8" autocomplete="on"><input type="hidden" name="formID" value="240850312017444" /><input type="hidden" id="JWTContainer" value="" /><input type="hidden" id="cardinalOrderNumber" value="" /><input type="hidden" id="jsExecutionTracker" name="jsExecutionTracker" value="build-date-1711544727653" /><input type="hidden" id="submitSource" name="submitSource" value="unknown" /><input type="hidden" id="buildDate" name="buildDate" value="1711544727653" />\r\n  <div role="main" class="form-all">\r\n    <ul class="form-section page-section">\r\n      <li id="cid_1" class="form-input-wide" data-type="control_head">\r\n        <div class="form-header-group  header-large">\r\n          <div class="header-text httal htvam">\r\n            <h1 id="header_1" class="form-header" data-component="header">Service</h1>\r\n          </div>\r\n        </div>\r\n      </li>\r\n      <li class="form-line jf-required" data-type="control_textbox" id="id_3"><label class="form-label form-label-top form-label-auto" id="label_3" for="input_3" aria-hidden="false"> Nama<span class="form-required">*</span> </label>\r\n        <div id="cid_3" class="form-input-wide jf-required" data-layout="half"> <input type="text" id="input_3" name="q3_nama" data-type="input-textbox" class="form-textbox validate[required]" data-defaultvalue="" style="width:310px" size="310" placeholder="Nama" data-component="textbox" aria-labelledby="label_3" required="" value="" /> </div>\r\n      </li>\r\n      <li class="form-line jf-required" data-type="control_radio" id="id_4"><label class="form-label form-label-top form-label-auto" id="label_4" aria-hidden="false"> Jenis kelamin<span class="form-required">*</span> </label>\r\n        <div id="cid_4" class="form-input-wide jf-required" data-layout="full">\r\n          <div class="form-single-column" role="group" aria-labelledby="label_4" data-component="radio"><span class="form-radio-item" style="clear:left"><span class="dragger-item"></span><input type="radio" aria-describedby="label_4" class="form-radio validate[required]" id="input_4_0" name="q4_jenisKelamin" value="Laki - Laki" required="" /><label id="label_input_4_0" for="input_4_0">Laki - Laki</label></span><span class="form-radio-item" style="clear:left"><span class="dragger-item"></span><input type="radio" aria-describedby="label_4" class="form-radio validate[required]" id="input_4_1" name="q4_jenisKelamin" value="Perempuan" required="" /><label id="label_input_4_1" for="input_4_1">Perempuan</label></span></div>\r\n        </div>\r\n      </li>\r\n      <li class="form-line jf-required" data-type="control_number" id="id_10"><label class="form-label form-label-top form-label-auto" id="label_10" for="input_10" aria-hidden="false"> Telepon / Whats app<span class="form-required">*</span> </label>\r\n        <div id="cid_10" class="form-input-wide jf-required" data-layout="half"> <input type="number" id="input_10" name="q10_telepon10" data-type="input-number" class=" form-number-input form-textbox validate[required]" data-defaultvalue="" style="width:310px" size="310" placeholder="(62)" data-component="number" aria-labelledby="label_10" required="" step="any" value="" /> </div>\r\n      </li>\r\n      <li class="form-line jf-required" data-type="control_dropdown" id="id_8"><label class="form-label form-label-top form-label-auto" id="label_8" for="input_8" aria-hidden="false"> Type motor <span class="form-required">*</span> </label>\r\n        <div id="cid_8" class="form-input-wide jf-required" data-layout="half"> <select class="form-dropdown validate[required]" id="input_8" name="q8_typeMotor" style="width:310px" data-component="dropdown" required="" aria-label="Type motor ">\r\n            <option value="">Please Select</option>\r\n            <option value="Uwinfly R8P">Uwinfly R8P</option>\r\n            <option value="Uwinfly R8S">Uwinfly R8S</option>\r\n            <option value="Uwinfly R7S">Uwinfly R7S</option>\r\n            <option value="Uwinfly Maleo Roda 3">Uwinfly Maleo Roda 3</option>\r\n            <option value="Uwinfly D8P">Uwinfly D8P</option>\r\n            <option value="Uwinfly D8S">Uwinfly D8S</option>\r\n            <option value="Uwinfly D7S">Uwinfly D7S</option>\r\n            <option value="Uwinfly X6">Uwinfly X6</option>\r\n            <option value="Uwinfly T3 Pro">Uwinfly T3 Pro</option>\r\n            <option value="Uwinfly T5">Uwinfly T5</option>\r\n            <option value="Uwinfly T3">Uwinfly T3</option>\r\n            <option value="Uwinfly N9 Pro">Uwinfly N9 Pro</option>\r\n            <option value="Uwinfly LN">Uwinfly LN</option>\r\n            <option value="Uwinfly GT2">Uwinfly GT2</option>\r\n            <option value="Uwinfly T5 Lithium">Uwinfly T5 Lithium</option>\r\n            <option value="Uwinfly T3s Pro">Uwinfly T3s Pro</option>\r\n            <option value="Uwinfly M 60">Uwinfly M 60</option>\r\n            <option value="Uwinfly X6">Uwinfly X6</option>\r\n            <option value="Uwinfly KT2">Uwinfly KT2</option>\r\n          </select> </div>\r\n      </li>\r\n      <li class="form-line jf-required" data-type="control_datetime" id="id_11"><label class="form-label form-label-top form-label-auto" id="label_11" for="lite_mode_11" aria-hidden="false"> Tanggal service<span class="form-required">*</span> </label>\r\n        <div id="cid_11" class="form-input-wide jf-required" data-layout="half">\r\n          <div data-wrapper-react="true">\r\n            <div style="display:none"><span class="form-sub-label-container" style="vertical-align:top"><input type="tel" class="form-textbox validate[required, limitDate]" id="month_11" name="q11_tanggalService[month]" size="2" data-maxlength="2" data-age="" maxLength="2" value="" required="" autoComplete="off" aria-labelledby="label_11 sublabel_11_month" /><span class="date-separate" aria-hidden="true"> -</span><label class="form-sub-label" for="month_11" id="sublabel_11_month" style="min-height:13px">Month</label></span><span class="form-sub-label-container" style="vertical-align:top"><input type="tel" class="form-textbox validate[required, limitDate]" id="day_11" name="q11_tanggalService[day]" size="2" data-maxlength="2" data-age="" maxLength="2" value="" required="" autoComplete="off" aria-labelledby="label_11 sublabel_11_day" /><span class="date-separate" aria-hidden="true"> -</span><label class="form-sub-label" for="day_11" id="sublabel_11_day" style="min-height:13px">Day</label></span><span class="form-sub-label-container" style="vertical-align:top"><input type="tel" class="form-textbox validate[required, limitDate]" id="year_11" name="q11_tanggalService[year]" size="4" data-maxlength="4" data-age="" maxLength="4" value="" required="" autoComplete="off" aria-labelledby="label_11 sublabel_11_year" /><label class="form-sub-label" for="year_11" id="sublabel_11_year" style="min-height:13px">Year</label></span></div><span class="form-sub-label-container" style="vertical-align:top"><input type="text" class="form-textbox validate[required, limitDate, validateLiteDate]" id="lite_mode_11" size="12" data-maxlength="12" maxLength="12" data-age="" value="" required="" data-format="mmddyyyy" data-seperator="-" placeholder="MM-DD-YYYY" data-placeholder="MM-DD-YYYY" autoComplete="off" aria-labelledby="label_11 sublabel_11_litemode" /><img class=" newDefaultTheme-dateIcon icon-liteMode" alt="Pick a Date" id="input_11_pick" src="https://cdn.jotfor.ms/images/calendar.png" data-component="datetime" aria-hidden="true" data-allow-time="No" data-version="v2" /><label class="form-sub-label" for="lite_mode_11" id="sublabel_11_litemode" style="min-height:13px">Tanggal</label></span>\r\n          </div>\r\n        </div>\r\n      </li>\r\n      <li class="form-line jf-required" data-type="control_textbox" id="id_22"><label class="form-label form-label-top form-label-auto" id="label_22" for="input_22" aria-hidden="false"> Lokasi<span class="form-required">*</span> </label>\r\n        <div id="cid_22" class="form-input-wide jf-required" data-layout="half"> <input type="text" id="input_22" name="q22_lokasi" data-type="input-textbox" class="form-textbox validate[required]" data-defaultvalue="" style="width:310px" size="310" data-component="textbox" aria-labelledby="label_22" required="" value="" /> </div>\r\n      </li>\r\n      <li class="form-line fixed-width jf-required" data-type="control_textarea" id="id_17"><label class="form-label form-label-top form-label-auto" id="label_17" for="input_17" aria-hidden="false"> Catatan kendala motor <span class="form-required">*</span> </label>\r\n        <div id="cid_17" class="form-input-wide jf-required" data-layout="full"> <textarea id="input_17" class="form-textarea validate[required]" name="q17_catatanKendala" style="width:310px;height:163px" data-component="textarea" required="" aria-labelledby="label_17"></textarea> </div>\r\n      </li>\r\n      <li class="form-line jf-required" data-type="control_fileupload" id="id_16"><label class="form-label form-label-top form-label-auto" id="label_16" for="input_16" aria-hidden="false"> Foto Kendala motor <span class="form-required">*</span> </label>\r\n        <div id="cid_16" class="form-input-wide jf-required" data-layout="full">\r\n          <div class="jfQuestion-fields" data-wrapper-react="true">\r\n            <div class="jfField isFilled">\r\n              <div class="jfUpload-wrapper">\r\n                <div class="jfUpload-container">\r\n                  <div class="jfUpload-button-container">\r\n                    <div class="jfUpload-button" aria-hidden="true" tabindex="0" style="display:none" data-version="v2">Browse Files<div class="jfUpload-heading forDesktop">Drag and drop files here</div>\r\n                      <div class="jfUpload-heading forMobile">Choose a file</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class="jfUpload-files-container">\r\n                  <div class="validate[multipleUpload]"><input type="file" id="input_16" name="q16_fotoKendala[]" multiple="" class="form-upload-multiple validate[required]" data-imagevalidate="yes" data-file-accept="pdf, doc, docx, xls, xlsx, csv, txt, rtf, html, zip, mp3, wma, mpg, flv, avi, jpg, jpeg, png, gif" data-limit-file-size="Yes" data-file-maxsize="10854" data-file-minsize="0" data-file-limit="" data-component="fileupload" required="" aria-label="Browse Files" /></div>\r\n                </div>\r\n              </div>\r\n              <div data-wrapper-react="true"></div>\r\n            </div><span style="display:none" class="cancelText">Cancel</span><span style="display:none" class="ofText">of</span>\r\n          </div>\r\n        </div>\r\n      </li>\r\n      <li class="form-line jf-required" data-type="control_checkbox" id="id_15"><label class="form-label form-label-top form-label-auto" id="label_15" for="input_15_0" aria-hidden="false"> Konfirmasi<span class="form-required">*</span> </label>\r\n        <div id="cid_15" class="form-input-wide jf-required" data-layout="full">\r\n          <div class="form-single-column" role="group" aria-labelledby="label_15" data-component="checkbox"><span class="form-checkbox-item" style="clear:left"><span class="dragger-item"></span><input type="checkbox" aria-describedby="label_15" class="form-checkbox validate[required]" id="input_15_0" name="q15_typeA15[]" value="Memastikan data yang di atas sudah sebenar benarnya" required="" /><label id="label_input_15_0" for="input_15_0">Memastikan data yang di atas sudah sebenar benarnya</label></span></div>\r\n        </div>\r\n      </li>\r\n      <li class="form-line" data-type="control_button" id="id_2">\r\n        <div id="cid_2" class="form-input-wide" data-layout="full">\r\n          <div data-align="left" class="form-buttons-wrapper form-buttons-left   jsTest-button-wrapperField"><button id="input_2" type="submit" class="form-submit-button form-submit-button-red-500 submit-button jf-form-buttons jsTest-submitField" data-component="button" data-content="">Service</button></div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n  <input type="hidden" class="simple_spc" id="simple_spc" name="simple_spc" value="240850312017444" />\r\n  <script type="text/javascript">\r\n    var all_spc = document.querySelectorAll("form[id=\'240850312017444\'] .si" + "mple" + "_spc");\r\n    for (var i = 0; i < all_spc.length; i++)\r\n    {\r\n      all_spc[i].value = "240850312017444-240850312017444";\r\n    }\r\n  </script>\r\n</form>'
                  }
                />
              </section>
            </section>
          </section>
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <Stack__
              as={"div"}
              data-plasmic-name={"clientsSection6"}
              data-plasmic-override={overrides.clientsSection6}
              hasGap={true}
              className={classNames(projectcss.all, sty.clientsSection6)}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.form2),
                  extendedOnValuesChange:
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["form2", "value"],
                      FormWrapper_Helpers
                    ),
                  formItems: undefined,
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: undefined,
                  onIsSubmittingChange:
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["form2", "isSubmitting"],
                      FormWrapper_Helpers
                    ),
                  ref: ref => {
                    $refs["form2"] = ref;
                  },
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "form2.value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "form2.isSubmitting"
                    }
                  ],
                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <FormWrapper
                    data-plasmic-name={"form2"}
                    data-plasmic-override={overrides.form2}
                    {...child$Props}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__tLpci
                      )}
                      label={"Name"}
                      name={"name"}
                    >
                      <AntdInput
                        className={classNames(
                          "__wab_instance",
                          sty.input__ra7M
                        )}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__qlai6
                      )}
                      hidden={false}
                      label={"Telepon"}
                    >
                      <AntdInput
                        className={classNames(
                          "__wab_instance",
                          sty.input__zaI5S
                        )}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__gK34T
                      )}
                      label={"Message"}
                      name={"message"}
                    >
                      <AntdTextArea
                        className={classNames("__wab_instance", sty.textArea)}
                      />
                    </FormItemWrapper>
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__tRqf8
                      )}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7UlWy
                        )}
                      >
                        {"Kirim"}
                      </div>
                    </AntdButton>
                  </FormWrapper>
                );
              })()}
              <section
                className={classNames(projectcss.all, sty.section__fdJul)}
              >
                <section
                  className={classNames(projectcss.all, sty.section___0ByhU)}
                >
                  <section
                    className={classNames(projectcss.all, sty.section___65MwS)}
                  >
                    <section
                      className={classNames(projectcss.all, sty.section__wuMUr)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns__hxY29
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__qyiBg
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rlhQ
                            )}
                          >
                            {"Pertanyaan sering di ajukan ?"}
                          </div>
                          <ArrowOpenRightSvgrepoComsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__gmgF8
                            )}
                            role={"img"}
                          />
                        </div>
                      </div>
                    </section>
                  </section>
                  {(() => {
                    const child$Props = {
                      activeKey: generateStateValueProp($state, [
                        "accordion2",
                        "activePanelId"
                      ]),
                      bordered: true,
                      className: classNames("__wab_instance", sty.accordion2),
                      items: (
                        <React.Fragment>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem__fkX9V
                            )}
                            id={1}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__mbya5
                                )}
                              >
                                {
                                  "Bagaimana caranya & syarat-syarat untuk pembukaan distributor atau waralaba dengan uwinflay? "
                                }
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__cKmfm
                              )}
                            >
                              {"First Children"}
                            </div>
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem___3Zc5E
                            )}
                            id={2}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__bangq
                                )}
                              >
                                {"Apakah bisa buka toko di rumah sendiri? "}
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ajigl
                              )}
                            >
                              {"Second Children"}
                            </div>
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem__n717
                            )}
                            id={"3"}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__axErQ
                                )}
                              >
                                {
                                  "Apakah barang diantar sampai toko & bagaimana dengan ongkos kirimnya? "
                                }
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__bPigY
                              )}
                            >
                              {"Second Children"}
                            </div>
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem___39Sfe
                            )}
                            id={"4"}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___7QNiu
                                )}
                              >
                                {"Apakah ada minimal pemesanan? "}
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ifbW
                              )}
                            >
                              {"Second Children"}
                            </div>
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem__fYXyz
                            )}
                            id={"5"}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__dNp5K
                                )}
                              >
                                {
                                  "Apakah harganya lebih murah dibandingkan distributor? "
                                }
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hmlE5
                              )}
                            >
                              {"Second Children"}
                            </div>
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem___5JnoL
                            )}
                            id={"6"}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__iFhmO
                                )}
                              >
                                {
                                  "Apakah tokonya menggunakan nama uwinflay? Berapa lama waktu sampai buka toko? "
                                }
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__tcQzz
                              )}
                            >
                              {"Second Children"}
                            </div>
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem__wptYj
                            )}
                            id={"7"}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__tqBCa
                                )}
                              >
                                {"Apakah boleh berjualan produk lain?"}
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yhJoR
                              )}
                            >
                              {"Second Children"}
                            </div>
                          </AntdAccordionItem>
                        </React.Fragment>
                      ),
                      onChange: generateStateOnChangePropForCodeComponents(
                        $state,
                        "activePanelId",
                        ["accordion2", "activePanelId"],
                        AntdAccordion_Helpers
                      )
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "activePanelId",
                          plasmicStateName: "accordion2.activePanelId"
                        }
                      ],
                      [],
                      AntdAccordion_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdAccordion
                        data-plasmic-name={"accordion2"}
                        data-plasmic-override={overrides.accordion2}
                        {...child$Props}
                      />
                    );
                  })()}
                </section>
              </section>
            </Stack__>
          ) : null}
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <section className={classNames(projectcss.all, sty.section__vYbvR)}>
              <div className={classNames(projectcss.all, sty.columns__tx9If)}>
                <div className={classNames(projectcss.all, sty.column__nUs5J)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bbEqZ
                    )}
                  >
                    {"Pertanyaan sering di ajukan ?"}
                  </div>
                </div>
              </div>
            </section>
          ) : null}
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <section
              className={classNames(projectcss.all, sty.section___8MUcr)}
            >
              <div className={classNames(projectcss.all, sty.columns__yLaz8)}>
                <div className={classNames(projectcss.all, sty.column__y3VPj)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__drSpa
                    )}
                  >
                    {"Pertanyaan sering di ajukan ?"}
                  </div>
                </div>
              </div>
            </section>
          ) : null}
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false)
            ? (() => {
                const child$Props = {
                  activeKey: generateStateValueProp($state, [
                    "accordion3",
                    "activePanelId"
                  ]),
                  bordered: true,
                  className: classNames("__wab_instance", sty.accordion3),
                  items: (
                    <React.Fragment>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__pmm0T
                        )}
                        id={1}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wmmei
                            )}
                          >
                            {
                              "Bagaimana caranya & syarat-syarat untuk pembukaan distributor atau waralaba dengan uwinflay? "
                            }
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fsfkc
                          )}
                        >
                          {"First Children"}
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__pPbjI
                        )}
                        id={2}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tm4Is
                            )}
                          >
                            {"Apakah bisa buka toko di rumah sendiri? "}
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xji0
                          )}
                        >
                          {"Second Children"}
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__rqBx
                        )}
                        id={"3"}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__lw6Vo
                            )}
                          >
                            {
                              "Apakah barang diantar sampai toko & bagaimana dengan ongkos kirimnya? "
                            }
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__udfmq
                          )}
                        >
                          {"Second Children"}
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__xoyFx
                        )}
                        id={"4"}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__aaJOy
                            )}
                          >
                            {"Apakah ada minimal pemesanan? "}
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jZlm0
                          )}
                        >
                          {"Second Children"}
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__yLs6O
                        )}
                        id={"5"}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vvgqd
                            )}
                          >
                            {
                              "Apakah harganya lebih murah dibandingkan distributor? "
                            }
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vnpMs
                          )}
                        >
                          {"Second Children"}
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__nwixV
                        )}
                        id={"6"}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___7GRwx
                            )}
                          >
                            {
                              "Apakah tokonya menggunakan nama uwinflay? Berapa lama waktu sampai buka toko? "
                            }
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pYste
                          )}
                        >
                          {"Second Children"}
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__qhY6R
                        )}
                        id={"7"}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dmEdl
                            )}
                          >
                            {"Apakah boleh berjualan produk lain?"}
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___382Nf
                          )}
                        >
                          {"Second Children"}
                        </div>
                      </AntdAccordionItem>
                    </React.Fragment>
                  ),
                  onChange: generateStateOnChangePropForCodeComponents(
                    $state,
                    "activePanelId",
                    ["accordion3", "activePanelId"],
                    AntdAccordion_Helpers
                  )
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "activePanelId",
                      plasmicStateName: "accordion3.activePanelId"
                    }
                  ],
                  [],
                  AntdAccordion_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdAccordion
                    data-plasmic-name={"accordion3"}
                    data-plasmic-override={overrides.accordion3}
                    {...child$Props}
                  />
                );
              })()
            : null}
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <section className={classNames(projectcss.all, sty.section__mou47)}>
              <section
                className={classNames(projectcss.all, sty.section__mGm5Q)}
              >
                <div className={classNames(projectcss.all, sty.columns__x2Wd7)}>
                  <div className={classNames(projectcss.all, sty.column__bC9Q)}>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__s6XI6
                      )}
                    >
                      {"Pertanyaan sering di ajukan ?"}
                    </div>
                    <ArrowOpenRightSvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg___4YFfP)}
                      role={"img"}
                    />
                  </div>
                </div>
                <section
                  className={classNames(projectcss.all, sty.section__x4W94)}
                >
                  <div
                    className={classNames(projectcss.all, sty.columns___4MgY4)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__aHxi9)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__q9NEy
                        )}
                      >
                        {"Pertanyaan sering di ajukan ?"}
                      </div>
                      <ArrowOpenRightSvgrepoComsvgIcon
                        className={classNames(projectcss.all, sty.svg__soaJ2)}
                        role={"img"}
                      />
                    </div>
                  </div>
                </section>
              </section>
              {(() => {
                const child$Props = {
                  activeKey: generateStateValueProp($state, [
                    "accordion4",
                    "activePanelId"
                  ]),
                  bordered: true,
                  className: classNames("__wab_instance", sty.accordion4),
                  items: (
                    <React.Fragment>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__uca73
                        )}
                        id={1}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___2Gozi
                            )}
                          >
                            {
                              "Bagaimana caranya & syarat-syarat untuk pembukaan distributor atau waralaba dengan uwinflay? "
                            }
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xpxAs
                          )}
                        >
                          {"First Children"}
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__pTdpq
                        )}
                        id={2}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wgFr7
                            )}
                          >
                            {"Apakah bisa buka toko di rumah sendiri? "}
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sInx8
                          )}
                        >
                          {"Second Children"}
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__aTs9V
                        )}
                        id={"3"}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__i2V10
                            )}
                          >
                            {
                              "Apakah barang diantar sampai toko & bagaimana dengan ongkos kirimnya? "
                            }
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sqo4Y
                          )}
                        >
                          {"Second Children"}
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__ma404
                        )}
                        id={"4"}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tuZmo
                            )}
                          >
                            {"Apakah ada minimal pemesanan? "}
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pCzMq
                          )}
                        >
                          {"Second Children"}
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__c0LAl
                        )}
                        id={"5"}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__eeAy
                            )}
                          >
                            {
                              "Apakah harganya lebih murah dibandingkan distributor? "
                            }
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mQy2E
                          )}
                        >
                          {"Second Children"}
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__lZrf
                        )}
                        id={"6"}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qUby
                            )}
                          >
                            {
                              "Apakah tokonya menggunakan nama uwinflay? Berapa lama waktu sampai buka toko? "
                            }
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lkJnZ
                          )}
                        >
                          {"Second Children"}
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__rrAgw
                        )}
                        id={"7"}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bFgFg
                            )}
                          >
                            {"Apakah boleh berjualan produk lain?"}
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ktPyN
                          )}
                        >
                          {"Second Children"}
                        </div>
                      </AntdAccordionItem>
                    </React.Fragment>
                  ),
                  onChange: generateStateOnChangePropForCodeComponents(
                    $state,
                    "activePanelId",
                    ["accordion4", "activePanelId"],
                    AntdAccordion_Helpers
                  )
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "activePanelId",
                      plasmicStateName: "accordion4.activePanelId"
                    }
                  ],
                  [],
                  AntdAccordion_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdAccordion
                    data-plasmic-name={"accordion4"}
                    data-plasmic-override={overrides.accordion4}
                    {...child$Props}
                  />
                );
              })()}
            </section>
          ) : null}
          <FooterMain
            data-plasmic-name={"footerMain"}
            data-plasmic-override={overrides.footerMain}
            className={classNames("__wab_instance", sty.footerMain)}
          />

          <section className={classNames(projectcss.all, sty.section__ujX7)}>
            <div className={classNames(projectcss.all, sty.columns__puOir)}>
              <div className={classNames(projectcss.all, sty.column__sraYb)}>
                <div className={classNames(projectcss.all, sty.columns__gfqHn)}>
                  <div
                    className={classNames(projectcss.all, sty.column___4XnWy)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4Cx4B
                      )}
                    >
                      {"Pembayaran :"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__bfjks)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__j0CqP)}
                      displayHeight={"80px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/uwinfly/images/_1646110410MandiriVapng.png",
                        fullWidth: 257,
                        fullHeight: 225,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column___7B6Ca)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__hsaA)}
                      displayHeight={"62px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/uwinfly/images/bcApng.png",
                        fullWidth: 257,
                        fullHeight: 225,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__p0Jxj)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__zLZfT)}
                      displayHeight={"66px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/uwinfly/images/download1Png.png",
                        fullWidth: 257,
                        fullHeight: 225,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__vYeEd)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__gkbp6)}
                      displayHeight={"80px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/uwinfly/images/downloadpng.png",
                        fullWidth: 225,
                        fullHeight: 225,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
              </div>
            </div>
          </section>
          <PlasmicHead
            data-plasmic-name={"pageMetadataOverride"}
            data-plasmic-override={overrides.pageMetadataOverride}
            canonical={"https://uwinfly.co.id/Kotak-kami"}
            className={classNames("__wab_instance", sty.pageMetadataOverride)}
            description={"produk uwinfly motor listrik sepeda listrik "}
            image={"/plasmic/uwinfly/images/logopng.png"}
            title={"kotak kami"}
          />

          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <div className={classNames(projectcss.all, sty.freeBox__feKyP)}>
              <div className={classNames(projectcss.all, sty.columns__pwUtX)}>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.column__khLfJ
                  )}
                  component={Link}
                  href={`/`}
                  platform={"nextjs"}
                >
                  <section
                    className={classNames(projectcss.all, sty.section__ovW7F)}
                  >
                    <IconNavbar2
                      data-plasmic-name={"iconNavbar2"}
                      data-plasmic-override={overrides.iconNavbar2}
                      className={classNames("__wab_instance", sty.iconNavbar2)}
                    />
                  </section>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__o2Gcf
                    )}
                  >
                    {"Home"}
                  </div>
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.column__paEp
                  )}
                  component={Link}
                  href={`/`}
                  platform={"nextjs"}
                >
                  <section
                    className={classNames(projectcss.all, sty.section__iJSo)}
                  >
                    <Home8SvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__pVb3J)}
                      role={"img"}
                    />
                  </section>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tqY07
                    )}
                  >
                    {"Home"}
                  </div>
                </PlasmicLink__>
                <div className={classNames(projectcss.all, sty.column__hTwSf)}>
                  <section
                    className={classNames(projectcss.all, sty.section__fDmU)}
                  >
                    <MotorcycleBikeSvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__tKwSd)}
                      role={"img"}
                    />
                  </section>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9E9Ag
                    )}
                  >
                    {"Promo"}
                  </div>
                </div>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.column__bdeQm
                  )}
                  component={Link}
                  href={`/chat`}
                  platform={"nextjs"}
                >
                  <section
                    className={classNames(projectcss.all, sty.section__dMFjy)}
                  >
                    <ChatRoundDotsSvgrepoCom1SvgIcon
                      className={classNames(projectcss.all, sty.svg__xy6WP)}
                      role={"img"}
                    />
                  </section>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__byRvs
                    )}
                  >
                    {"Chat"}
                  </div>
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.column__iiD0W
                  )}
                  component={Link}
                  href={`/Profile`}
                  platform={"nextjs"}
                >
                  <section
                    className={classNames(projectcss.all, sty.section___9Yq1P)}
                  >
                    <UserSvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__oitEq)}
                      role={"img"}
                    />
                  </section>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xXcg
                    )}
                  >
                    {"Profile"}
                  </div>
                </PlasmicLink__>
              </div>
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navigationBar",
    "link1",
    "link2",
    "link3",
    "link4",
    "link5",
    "link6",
    "h2",
    "embedHtml",
    "clientsSection6",
    "form2",
    "textArea",
    "accordion2",
    "accordion3",
    "accordion4",
    "footerMain",
    "pageMetadataOverride",
    "iconNavbar2"
  ],
  navigationBar: [
    "navigationBar",
    "link1",
    "link2",
    "link3",
    "link4",
    "link5",
    "link6"
  ],
  link1: ["link1"],
  link2: ["link2"],
  link3: ["link3"],
  link4: ["link4"],
  link5: ["link5"],
  link6: ["link6"],
  h2: ["h2"],
  embedHtml: ["embedHtml"],
  clientsSection6: ["clientsSection6", "form2", "textArea", "accordion2"],
  form2: ["form2", "textArea"],
  textArea: ["textArea"],
  accordion2: ["accordion2"],
  accordion3: ["accordion3"],
  accordion4: ["accordion4"],
  footerMain: ["footerMain"],
  pageMetadataOverride: ["pageMetadataOverride"],
  iconNavbar2: ["iconNavbar2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  link1: typeof Link1;
  link2: typeof Link2;
  link3: typeof Link3;
  link4: typeof Link4;
  link5: typeof Link5;
  link6: typeof Link6;
  h2: "h2";
  embedHtml: typeof Embed;
  clientsSection6: "div";
  form2: typeof FormWrapper;
  textArea: typeof AntdTextArea;
  accordion2: typeof AntdAccordion;
  accordion3: typeof AntdAccordion;
  accordion4: typeof AntdAccordion;
  footerMain: typeof FooterMain;
  pageMetadataOverride: typeof PlasmicHead;
  iconNavbar2: typeof IconNavbar2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicService__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicService__VariantsArgs;
    args?: PlasmicService__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicService__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicService__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicService__ArgProps,
          internalVariantPropNames: PlasmicService__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicService__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicService";
  } else {
    func.displayName = `PlasmicService.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"iWaiTLt8mAup4ReehswsSx"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "iWaiTLt8mAup4ReehswsSx"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicService = Object.assign(
  // Top-level PlasmicService renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    link1: makeNodeComponent("link1"),
    link2: makeNodeComponent("link2"),
    link3: makeNodeComponent("link3"),
    link4: makeNodeComponent("link4"),
    link5: makeNodeComponent("link5"),
    link6: makeNodeComponent("link6"),
    h2: makeNodeComponent("h2"),
    embedHtml: makeNodeComponent("embedHtml"),
    clientsSection6: makeNodeComponent("clientsSection6"),
    form2: makeNodeComponent("form2"),
    textArea: makeNodeComponent("textArea"),
    accordion2: makeNodeComponent("accordion2"),
    accordion3: makeNodeComponent("accordion3"),
    accordion4: makeNodeComponent("accordion4"),
    footerMain: makeNodeComponent("footerMain"),
    pageMetadataOverride: makeNodeComponent("pageMetadataOverride"),
    iconNavbar2: makeNodeComponent("iconNavbar2"),

    // Metadata about props expected for PlasmicService
    internalVariantProps: PlasmicService__VariantProps,
    internalArgProps: PlasmicService__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Service",
      description:
        "Dapat melakukan kunjungan home service ke wilayah anda yang sudah tercover",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicService;
/* prettier-ignore-end */

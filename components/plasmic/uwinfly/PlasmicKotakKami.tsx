// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iWaiTLt8mAup4ReehswsSx
// Component: Iuq95P4E6ady

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import Link1 from "../../Link1"; // plasmic-import: Wk3pm7NzsIY9/component
import Link2 from "../../Link2"; // plasmic-import: f0ftlBRhAHPN/component
import Link3 from "../../Link3"; // plasmic-import: P6OuWwiFq4gQ/component
import Link4 from "../../Link4"; // plasmic-import: b5zzKfYNksQk/component
import Link5 from "../../Link5"; // plasmic-import: jy_zqM-l3sYE/component
import Link6 from "../../Link6"; // plasmic-import: qdfwHKfwtv8_/component
import Button from "../../Button"; // plasmic-import: f3lmI1Q2JQuQ/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import Button2 from "../../Button2"; // plasmic-import: bn8Yy5q1VEYE/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import FooterMain from "../../FooterMain"; // plasmic-import: qoZVCK7paFuV/component

import { useScreenVariants as useScreenVariantssppb0UOhrN5L } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Sppb0uOhrN5l/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: iWaiTLt8mAup4ReehswsSx/projectcss
import sty from "./PlasmicKotakKami.module.css"; // plasmic-import: Iuq95P4E6ady/css

import ProfileCircleSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__ProfileCircleSvgrepoCom1Svg"; // plasmic-import: 0qa3aoynIlk5/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: q0SxIWf05NzX/icon
import BestSellersvgIcon from "./icons/PlasmicIcon__BestSellersvg"; // plasmic-import: gEr3vmMDIr_A/icon
import MotorcyclesvgIcon from "./icons/PlasmicIcon__Motorcyclesvg"; // plasmic-import: bB21gLC1MPi2/icon
import PinsvgIcon from "./icons/PlasmicIcon__Pinsvg"; // plasmic-import: d5Rc8pnBZxlJ/icon
import ArrowOpenRightSvgrepoComsvgIcon from "./icons/PlasmicIcon__ArrowOpenRightSvgrepoComsvg"; // plasmic-import: bseFrujWYX3A/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: Fvg9iqGVtOYx/icon
import LocationPinSvgrepoComsvgIcon from "./icons/PlasmicIcon__LocationPinSvgrepoComsvg"; // plasmic-import: WLhuhbeughNW/icon
import LocationArrowSvgrepoComsvgIcon from "./icons/PlasmicIcon__LocationArrowSvgrepoComsvg"; // plasmic-import: HBJM9aAQDa93/icon

createPlasmicElementProxy;

export type PlasmicKotakKami__VariantMembers = {};
export type PlasmicKotakKami__VariantsArgs = {};
type VariantPropType = keyof PlasmicKotakKami__VariantsArgs;
export const PlasmicKotakKami__VariantProps = new Array<VariantPropType>();

export type PlasmicKotakKami__ArgsType = {};
type ArgPropType = keyof PlasmicKotakKami__ArgsType;
export const PlasmicKotakKami__ArgProps = new Array<ArgPropType>();

export type PlasmicKotakKami__OverridesType = {
  root?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
  link1?: Flex__<typeof Link1>;
  link2?: Flex__<typeof Link2>;
  link3?: Flex__<typeof Link3>;
  link4?: Flex__<typeof Link4>;
  link5?: Flex__<typeof Link5>;
  link6?: Flex__<typeof Link6>;
  h2?: Flex__<"h2">;
  form3?: Flex__<typeof FormWrapper>;
  button2?: Flex__<typeof Button2>;
  embedHtml?: Flex__<typeof Embed>;
  clientsSection6?: Flex__<"div">;
  form2?: Flex__<typeof FormWrapper>;
  accordion2?: Flex__<typeof AntdAccordion>;
  accordion3?: Flex__<typeof AntdAccordion>;
  accordion4?: Flex__<typeof AntdAccordion>;
  footerMain?: Flex__<typeof FooterMain>;
};

export interface DefaultKotakKamiProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicKotakKami__RenderFunc(props: {
  variants: PlasmicKotakKami__VariantsArgs;
  args: PlasmicKotakKami__ArgsType;
  overrides: PlasmicKotakKami__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "accordion2.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "accordion3.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "accordion4.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "form3.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form3",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form3.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form3",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssppb0UOhrN5L()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicKotakKami.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicKotakKami.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicKotakKami.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicKotakKami.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicKotakKami.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicKotakKami.pageMetadata.description}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section className={classNames(projectcss.all, sty.section__n34IX)}>
            <NavigationBar
              data-plasmic-name={"navigationBar"}
              data-plasmic-override={overrides.navigationBar}
              brand={
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__s3LF4
                  )}
                  component={Link}
                  href={`/`}
                  platform={"nextjs"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__aDh81)}
                    displayHeight={"100px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={{
                      src: "/plasmic/uwinfly/images/logopng.png",
                      fullWidth: 512,
                      fullHeight: 512,
                      aspectRatio: undefined
                    }}
                  />
                </PlasmicLink__>
              }
              className={classNames("__wab_instance", sty.navigationBar)}
              closeButton={
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___6X7P0)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "20px"
                      : "auto"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "20px"
                      : "auto"
                  }
                  src={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? {
                          src: "/plasmic/uwinfly/images/_3F1C0155019E22Ca2146D6372Fa054D8Svg.svg",
                          fullWidth: 150,
                          fullHeight: 150,
                          aspectRatio: 1
                        }
                      : "https://static1.plasmic.app/close.svg"
                  }
                />
              }
              forceOpenMenu={
                hasVariant(globalVariants, "screen", "mobile")
                  ? false
                  : undefined
              }
              itemsGap={hasVariant(globalVariants, "screen", "mobile") ? 8 : 8}
              menuItems={
                <React.Fragment>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__c6CIg
                    )}
                    component={Link}
                    href={`/`}
                    platform={"nextjs"}
                  >
                    <Link1
                      data-plasmic-name={"link1"}
                      data-plasmic-override={overrides.link1}
                      className={classNames("__wab_instance", sty.link1)}
                    />
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__kaDod
                    )}
                    component={Link}
                    href={`/about-us`}
                    platform={"nextjs"}
                  >
                    <Link2
                      data-plasmic-name={"link2"}
                      data-plasmic-override={overrides.link2}
                      className={classNames("__wab_instance", sty.link2)}
                    />
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__fzoRk
                    )}
                    component={Link}
                    href={`/Mitra`}
                    platform={"nextjs"}
                  >
                    <Link3
                      data-plasmic-name={"link3"}
                      data-plasmic-override={overrides.link3}
                      className={classNames("__wab_instance", sty.link3)}
                    />
                  </PlasmicLink__>
                  <Link4
                    data-plasmic-name={"link4"}
                    data-plasmic-override={overrides.link4}
                    className={classNames("__wab_instance", sty.link4)}
                  />

                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__kx4PP
                    )}
                    component={Link}
                    href={`/persyaratan`}
                    platform={"nextjs"}
                  >
                    <Link5
                      data-plasmic-name={"link5"}
                      data-plasmic-override={overrides.link5}
                      className={classNames("__wab_instance", sty.link5)}
                    />
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__ifXvI
                    )}
                    component={Link}
                    href={`/Kotak-kami`}
                    platform={"nextjs"}
                  >
                    <Link6
                      data-plasmic-name={"link6"}
                      data-plasmic-override={overrides.link6}
                      className={classNames("__wab_instance", sty.link6)}
                    />
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__zjsAh
                    )}
                    component={Link}
                    href={`/Profile`}
                    platform={"nextjs"}
                  >
                    <ProfileCircleSvgrepoCom1SvgIcon
                      className={classNames(projectcss.all, sty.svg__tmYx5)}
                      role={"img"}
                    />
                  </PlasmicLink__>
                </React.Fragment>
              }
              openButton={
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__rOlnw)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "25px"
                      : "35px"
                  }
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  src={{
                    src: "/plasmic/uwinfly/images/iconsvg.svg",
                    fullWidth: 231,
                    fullHeight: 150,
                    aspectRatio: 1.537966
                  }}
                />
              }
              responsiveBreakpoint={768}
            />

            <section className={classNames(projectcss.all, sty.section__mKwdd)}>
              <div className={classNames(projectcss.all, sty.columns__eym06)}>
                <div
                  className={classNames(projectcss.all, sty.column__rpo39)}
                />

                <div className={classNames(projectcss.all, sty.column__cZdA)} />
              </div>
            </section>
          </section>
          <section className={classNames(projectcss.all, sty.section__r0H6J)}>
            <div className={classNames(projectcss.all, sty.columns__vrQgu)}>
              <div className={classNames(projectcss.all, sty.column__qYul)}>
                <Button
                  className={classNames("__wab_instance", sty.button___9Tb24)}
                  showStartIcon={true}
                >
                  {"Best seller"}
                </Button>
              </div>
              <div className={classNames(projectcss.all, sty.column__icm0X)}>
                <Button
                  className={classNames("__wab_instance", sty.button__svqrg)}
                  showStartIcon={true}
                  startIcon={
                    <BestSellersvgIcon
                      className={classNames(projectcss.all, sty.svg__ekkzD)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rOSsO
                    )}
                  >
                    {"Best seller"}
                  </div>
                </Button>
              </div>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.column__dijX4
                )}
                component={Link}
                href={`/Produk`}
                platform={"nextjs"}
              >
                <Button
                  className={classNames("__wab_instance", sty.button__n3KXw)}
                  showStartIcon={true}
                  startIcon={
                    <MotorcyclesvgIcon
                      className={classNames(projectcss.all, sty.svg__imovl)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cgclm
                    )}
                  >
                    {"Produk"}
                  </div>
                </Button>
              </PlasmicLink__>
              <div className={classNames(projectcss.all, sty.column__dau2Q)}>
                <Button
                  className={classNames("__wab_instance", sty.button__lLy49)}
                  showStartIcon={true}
                  startIcon={
                    <PinsvgIcon
                      className={classNames(projectcss.all, sty.svg__rgeR3)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__e39N1
                    )}
                  >
                    {"Lokasi"}
                  </div>
                </Button>
              </div>
            </div>
          </section>
          <section className={classNames(projectcss.all, sty.section__jLsP7)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__bxKl)}
            >
              <div className={classNames(projectcss.all, sty.column__u1EGt)}>
                <Button
                  className={classNames("__wab_instance", sty.button__vZTdR)}
                  showStartIcon={true}
                  startIcon={
                    <BestSellersvgIcon
                      className={classNames(projectcss.all, sty.svg___7Lm3G)}
                      role={"img"}
                    />
                  }
                >
                  {"Best seller"}
                </Button>
              </div>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.column__fh0M4
                )}
                component={Link}
                href={`/Produk`}
                platform={"nextjs"}
              >
                <Button
                  className={classNames("__wab_instance", sty.button__yFj5K)}
                  showStartIcon={true}
                  startIcon={
                    <MotorcyclesvgIcon
                      className={classNames(projectcss.all, sty.svg___8PJqZ)}
                      role={"img"}
                    />
                  }
                >
                  {"Produk"}
                </Button>
              </PlasmicLink__>
              <div className={classNames(projectcss.all, sty.column__cy0Vb)}>
                <Button
                  className={classNames("__wab_instance", sty.button__hMzav)}
                  showStartIcon={true}
                  startIcon={
                    <PinsvgIcon
                      className={classNames(projectcss.all, sty.svg__h1Utu)}
                      role={"img"}
                    />
                  }
                >
                  {"Lokasi"}
                </Button>
              </div>
            </Stack__>
          </section>
          <div className={classNames(projectcss.all, sty.freeBox__kiXAg)}>
            <div className={classNames(projectcss.all, sty.freeBox__uuJaA)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__pOJkl)}
              >
                <div className={classNames(projectcss.all, sty.column__mwqgQ)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__up21G)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "172px"
                        : "322px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? {
                            src: "/plasmic/uwinfly/images/_9616Convertedpng3.png",
                            fullWidth: 2069,
                            fullHeight: 992,
                            aspectRatio: undefined
                          }
                        : {
                            src: "/plasmic/uwinfly/images/_9616Convertedpng3.png",
                            fullWidth: 2069,
                            fullHeight: 992,
                            aspectRatio: undefined
                          }
                    }
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__nm9Oc)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__uNyg)}
                  >
                    <h2
                      data-plasmic-name={"h2"}
                      data-plasmic-override={overrides.h2}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile")
                        ? "Tentang kami"
                        : "Tentang kami"}
                    </h2>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xf0SS
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile")
                        ? "Solusi tepat mempunyai dealer motor listrik dan sepeda listrik, uwinfly terjamin dan terpercaya untuk inventasi anda "
                        : "Solusi tepat mempunyai dealer motor listrik dan sepeda listrik, uwinfly terjamin dan terpercaya untuk inventasi anda "}
                    </div>
                    <section
                      className={classNames(projectcss.all, sty.section__abEzm)}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__nVbVo
                        )}
                      >
                        {"Daftar sekarang"}
                      </Button>
                    </section>
                  </Stack__>
                </div>
              </Stack__>
            </div>
          </div>
          <section className={classNames(projectcss.all, sty.section__u7HKy)}>
            {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
              <section
                className={classNames(projectcss.all, sty.section__msOSh)}
              >
                <div className={classNames(projectcss.all, sty.columns__tDhAe)}>
                  <div
                    className={classNames(projectcss.all, sty.column__oZjJy)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hXfQ6
                      )}
                    >
                      {"Pertanyaan sering di ajukan ?"}
                    </div>
                    <ArrowOpenRightSvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__alJl4)}
                      role={"img"}
                    />
                  </div>
                </div>
                <section
                  className={classNames(projectcss.all, sty.section__pvfwv)}
                >
                  <div
                    className={classNames(projectcss.all, sty.columns__alZs)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column___1Mwvp)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lSyK
                        )}
                      >
                        {"Pertanyaan sering di ajukan ?"}
                      </div>
                      <ArrowOpenRightSvgrepoComsvgIcon
                        className={classNames(projectcss.all, sty.svg__ia5Er)}
                        role={"img"}
                      />
                    </div>
                  </div>
                </section>
              </section>
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dZv9N
              )}
            >
              {"Kontak kami"}
            </div>
          </section>
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <section className={classNames(projectcss.all, sty.section__gToQd)}>
              <div className={classNames(projectcss.all, sty.columns__tu6Lk)}>
                <div className={classNames(projectcss.all, sty.column__e9O1E)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qg0L
                    )}
                  >
                    {"Pertanyaan sering di ajukan ?"}
                  </div>
                  <ArrowOpenRightSvgrepoComsvgIcon
                    className={classNames(projectcss.all, sty.svg__k3AfZ)}
                    role={"img"}
                  />
                </div>
              </div>
              <section
                className={classNames(projectcss.all, sty.section__iBvGy)}
              >
                <div className={classNames(projectcss.all, sty.columns__gIiEb)}>
                  <div
                    className={classNames(projectcss.all, sty.column__jScEf)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yJzjF
                      )}
                    >
                      {"Pertanyaan sering di ajukan ?"}
                    </div>
                    <ArrowOpenRightSvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__cmZsd)}
                      role={"img"}
                    />
                  </div>
                </div>
              </section>
            </section>
          ) : null}
          <section className={classNames(projectcss.all, sty.section__n6DMf)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dt5Cz
              )}
            >
              {"Kontak kami"}
            </div>
          </section>
          <section className={classNames(projectcss.all, sty.section__a8IUr)}>
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.form3),
                extendedOnValuesChange:
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["form3", "value"],
                    FormWrapper_Helpers
                  ),
                formItems: undefined,
                labelCol: { span: 8, horizontalOnly: true },
                layout: "vertical",
                mode: undefined,
                onFinish: async values => {
                  const $steps = {};

                  $steps["updateAccordionActivePanelId"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["accordion", "activePanelId"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateAccordionActivePanelId"] != null &&
                    typeof $steps["updateAccordionActivePanelId"] ===
                      "object" &&
                    typeof $steps["updateAccordionActivePanelId"].then ===
                      "function"
                  ) {
                    $steps["updateAccordionActivePanelId"] = await $steps[
                      "updateAccordionActivePanelId"
                    ];
                  }
                },
                onIsSubmittingChange:
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "isSubmitting",
                    ["form3", "isSubmitting"],
                    FormWrapper_Helpers
                  ),
                ref: ref => {
                  $refs["form3"] = ref;
                },
                wrapperCol: { span: 16, horizontalOnly: true }
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "form3.value"
                  },
                  {
                    name: "isSubmitting",
                    plasmicStateName: "form3.isSubmitting"
                  }
                ],
                [],
                FormWrapper_Helpers ?? {},
                child$Props
              );

              return (
                <FormWrapper
                  data-plasmic-name={"form3"}
                  data-plasmic-override={overrides.form3}
                  {...child$Props}
                >
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__bm3Nn
                    )}
                    label={"Name"}
                    name={"name"}
                  >
                    <AntdInput
                      className={classNames("__wab_instance", sty.input__m0BrC)}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__qAu8V
                    )}
                    label={"Phone"}
                  >
                    <AntdInput
                      className={classNames(
                        "__wab_instance",
                        sty.input___5ZNeZ
                      )}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__dZjb0
                    )}
                    label={"Message"}
                    name={"message"}
                  >
                    <AntdTextArea
                      className={classNames(
                        "__wab_instance",
                        sty.textArea__mo1JO
                      )}
                    />
                  </FormItemWrapper>
                  <Button2
                    className={classNames("__wab_instance", sty.button2)}
                    submitsForm={false}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__q0BCi
                      )}
                    >
                      {"Kirim"}
                    </div>
                  </Button2>
                </FormWrapper>
              );
            })()}
            <section className={classNames(projectcss.all, sty.section__rIkBk)}>
              <div className={classNames(projectcss.all, sty.columns___2Cl4)}>
                <div className={classNames(projectcss.all, sty.column__gxdyY)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zhdkO)}
                  >
                    <LocationPinSvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg___5Fk8D)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dR6Ug
                      )}
                    >
                      {"Kontak Kami"}
                    </div>
                  </div>
                  <section
                    className={classNames(projectcss.all, sty.section__sk8Bl)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___85S1H
                      )}
                    >
                      {"Pembelian Unit / Kerjasama\n0812-1997-4035"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1Tk
                      )}
                    >
                      {"Email\nuwinfly.id@gmail.com"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kkQp9
                      )}
                    >
                      {"Jam Kerja\nSenin - Jumat 8:00 - 17:00 WIB"}
                    </div>
                  </section>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.columns__vs5A)}>
                <div className={classNames(projectcss.all, sty.column__z13Qm)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sffp1)}
                  >
                    <LocationArrowSvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__hwG6Y)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___80YIs
                      )}
                    >
                      {"maps"}
                    </div>
                  </div>
                  <section
                    className={classNames(projectcss.all, sty.section__b5Gr)}
                  >
                    <Embed
                      data-plasmic-name={"embedHtml"}
                      data-plasmic-override={overrides.embedHtml}
                      className={classNames("__wab_instance", sty.embedHtml)}
                      code={
                        '<div style="max-width:100%;list-style:none; transition: none;overflow:hidden;height:300px;"><div id="embed-map-canvas" style="height:100%; width:100%;max-width:100%;"><iframe style="height:100%;width:100%;border:0;" frameborder="0" src="https://www.google.com/maps/embed/v1/place?q=PT+Uwinfly+Indonesia+Industries,+Jalan+Simoplas,+Randu+Garut,+Semarang+City,+Central+Java,+Indonesia&key=AIzaSyBFw0Qbyq9zTFTd-tUY6dZWTgaQzuU17R8"></iframe></div><a class="embed-ded-maphtml" rel="nofollow" href="https://www.bootstrapskins.com/themes" id="inject-map-data">premium bootstrap themes</a><style>#embed-map-canvas img{max-height:none;max-width:none!important;background:none!important;}</style></div>'
                      }
                    />
                  </section>
                </div>
              </div>
            </section>
          </section>
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <Stack__
              as={"div"}
              data-plasmic-name={"clientsSection6"}
              data-plasmic-override={overrides.clientsSection6}
              hasGap={true}
              className={classNames(projectcss.all, sty.clientsSection6)}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.form2),
                  extendedOnValuesChange:
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["form2", "value"],
                      FormWrapper_Helpers
                    ),
                  formItems: undefined,
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: undefined,
                  onIsSubmittingChange:
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["form2", "isSubmitting"],
                      FormWrapper_Helpers
                    ),
                  ref: ref => {
                    $refs["form2"] = ref;
                  },
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "form2.value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "form2.isSubmitting"
                    }
                  ],
                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <FormWrapper
                    data-plasmic-name={"form2"}
                    data-plasmic-override={overrides.form2}
                    {...child$Props}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__xaYmm
                      )}
                      label={"Name"}
                      name={"name"}
                    >
                      <AntdInput
                        className={classNames(
                          "__wab_instance",
                          sty.input__wVbhZ
                        )}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField___9VhQ4
                      )}
                      hidden={false}
                      label={"Telepon"}
                    >
                      <AntdInput
                        className={classNames(
                          "__wab_instance",
                          sty.input__vfh8C
                        )}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__ew9Lv
                      )}
                      label={"Message"}
                      name={"message"}
                    >
                      <AntdTextArea
                        className={classNames(
                          "__wab_instance",
                          sty.textArea__hR66I
                        )}
                      />
                    </FormItemWrapper>
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__nyWwi
                      )}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gZHwY
                        )}
                      >
                        {"Kirim"}
                      </div>
                    </AntdButton>
                  </FormWrapper>
                );
              })()}
              <section
                className={classNames(projectcss.all, sty.section__ibVz8)}
              >
                <section
                  className={classNames(projectcss.all, sty.section__ifV3G)}
                >
                  <section
                    className={classNames(projectcss.all, sty.section__n6RCf)}
                  >
                    <section
                      className={classNames(projectcss.all, sty.section__xp7Du)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns___08VMa
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__s9Sf
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__lOtN
                            )}
                          >
                            {"Pertanyaan sering di ajukan ?"}
                          </div>
                          <ArrowOpenRightSvgrepoComsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__vT4UF
                            )}
                            role={"img"}
                          />
                        </div>
                      </div>
                    </section>
                  </section>
                  {(() => {
                    const child$Props = {
                      activeKey: generateStateValueProp($state, [
                        "accordion2",
                        "activePanelId"
                      ]),
                      bordered: true,
                      className: classNames("__wab_instance", sty.accordion2),
                      items: (
                        <React.Fragment>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem__i87Do
                            )}
                            id={1}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___7KGbw
                                )}
                              >
                                {
                                  "Bagaimana caranya & syarat-syarat untuk pembukaan distributor atau waralaba dengan uwinflay? "
                                }
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jRa1
                              )}
                            >
                              {"First Children"}
                            </div>
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem__we1Xo
                            )}
                            id={2}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__lfvct
                                )}
                              >
                                {"Apakah bisa buka toko di rumah sendiri? "}
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__aissc
                              )}
                            >
                              {"Second Children"}
                            </div>
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem___6P5Uk
                            )}
                            id={"3"}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__g82Do
                                )}
                              >
                                {
                                  "Apakah barang diantar sampai toko & bagaimana dengan ongkos kirimnya? "
                                }
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jnMb
                              )}
                            >
                              {"Second Children"}
                            </div>
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem__jw5YJ
                            )}
                            id={"4"}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__uYucq
                                )}
                              >
                                {"Apakah ada minimal pemesanan? "}
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wBzZz
                              )}
                            >
                              {"Second Children"}
                            </div>
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem__d0PYd
                            )}
                            id={"5"}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__leykL
                                )}
                              >
                                {
                                  "Apakah harganya lebih murah dibandingkan distributor? "
                                }
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nKfiB
                              )}
                            >
                              {"Second Children"}
                            </div>
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem__q0DhE
                            )}
                            id={"6"}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__wspjr
                                )}
                              >
                                {
                                  "Apakah tokonya menggunakan nama uwinflay? Berapa lama waktu sampai buka toko? "
                                }
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__weJU
                              )}
                            >
                              {"Second Children"}
                            </div>
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem__p17LJ
                            )}
                            id={"7"}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__aaMj
                                )}
                              >
                                {"Apakah boleh berjualan produk lain?"}
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__l06G0
                              )}
                            >
                              {"Second Children"}
                            </div>
                          </AntdAccordionItem>
                        </React.Fragment>
                      ),
                      onChange: generateStateOnChangePropForCodeComponents(
                        $state,
                        "activePanelId",
                        ["accordion2", "activePanelId"],
                        AntdAccordion_Helpers
                      )
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "activePanelId",
                          plasmicStateName: "accordion2.activePanelId"
                        }
                      ],
                      [],
                      AntdAccordion_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdAccordion
                        data-plasmic-name={"accordion2"}
                        data-plasmic-override={overrides.accordion2}
                        {...child$Props}
                      />
                    );
                  })()}
                </section>
              </section>
            </Stack__>
          ) : null}
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <section className={classNames(projectcss.all, sty.section__tOiVm)}>
              <div className={classNames(projectcss.all, sty.columns__vkv7R)}>
                <div className={classNames(projectcss.all, sty.column__tTin)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___67Urf
                    )}
                  >
                    {"Pertanyaan sering di ajukan ?"}
                  </div>
                </div>
              </div>
            </section>
          ) : null}
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <section className={classNames(projectcss.all, sty.section__kdXg7)}>
              <div className={classNames(projectcss.all, sty.columns__gogQd)}>
                <div className={classNames(projectcss.all, sty.column__mwPS)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4Lo4I
                    )}
                  >
                    {"Pertanyaan sering di ajukan ?"}
                  </div>
                </div>
              </div>
            </section>
          ) : null}
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false)
            ? (() => {
                const child$Props = {
                  activeKey: generateStateValueProp($state, [
                    "accordion3",
                    "activePanelId"
                  ]),
                  bordered: true,
                  className: classNames("__wab_instance", sty.accordion3),
                  items: (
                    <React.Fragment>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__mLdG
                        )}
                        id={1}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wpqDw
                            )}
                          >
                            {
                              "Bagaimana caranya & syarat-syarat untuk pembukaan distributor atau waralaba dengan uwinflay? "
                            }
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sKqn
                          )}
                        >
                          {"First Children"}
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem___2Ut56
                        )}
                        id={2}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___58Bo
                            )}
                          >
                            {"Apakah bisa buka toko di rumah sendiri? "}
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cumpU
                          )}
                        >
                          {"Second Children"}
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__xy2VG
                        )}
                        id={"3"}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__d6ScS
                            )}
                          >
                            {
                              "Apakah barang diantar sampai toko & bagaimana dengan ongkos kirimnya? "
                            }
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dn924
                          )}
                        >
                          {"Second Children"}
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__kaMcX
                        )}
                        id={"4"}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__auTz
                            )}
                          >
                            {"Apakah ada minimal pemesanan? "}
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__uKm7N
                          )}
                        >
                          {"Second Children"}
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__kjwLl
                        )}
                        id={"5"}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xkgOn
                            )}
                          >
                            {
                              "Apakah harganya lebih murah dibandingkan distributor? "
                            }
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7Gwy
                          )}
                        >
                          {"Second Children"}
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__cNi2N
                        )}
                        id={"6"}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___1IB6B
                            )}
                          >
                            {
                              "Apakah tokonya menggunakan nama uwinflay? Berapa lama waktu sampai buka toko? "
                            }
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1QA7N
                          )}
                        >
                          {"Second Children"}
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__j1Di3
                        )}
                        id={"7"}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vtBxn
                            )}
                          >
                            {"Apakah boleh berjualan produk lain?"}
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aJxu
                          )}
                        >
                          {"Second Children"}
                        </div>
                      </AntdAccordionItem>
                    </React.Fragment>
                  ),
                  onChange: generateStateOnChangePropForCodeComponents(
                    $state,
                    "activePanelId",
                    ["accordion3", "activePanelId"],
                    AntdAccordion_Helpers
                  )
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "activePanelId",
                      plasmicStateName: "accordion3.activePanelId"
                    }
                  ],
                  [],
                  AntdAccordion_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdAccordion
                    data-plasmic-name={"accordion3"}
                    data-plasmic-override={overrides.accordion3}
                    {...child$Props}
                  />
                );
              })()
            : null}
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <section className={classNames(projectcss.all, sty.section__p8BFy)}>
              <section
                className={classNames(projectcss.all, sty.section__rziAo)}
              >
                <div className={classNames(projectcss.all, sty.columns__b7YdC)}>
                  <div
                    className={classNames(projectcss.all, sty.column__y82Og)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iJn16
                      )}
                    >
                      {"Pertanyaan sering di ajukan ?"}
                    </div>
                    <ArrowOpenRightSvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__wxAou)}
                      role={"img"}
                    />
                  </div>
                </div>
                <section
                  className={classNames(projectcss.all, sty.section__zgrKr)}
                >
                  <div
                    className={classNames(projectcss.all, sty.columns__p7VlK)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__yzfTx)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__t8Gqq
                        )}
                      >
                        {"Pertanyaan sering di ajukan ?"}
                      </div>
                      <ArrowOpenRightSvgrepoComsvgIcon
                        className={classNames(projectcss.all, sty.svg__k2J3U)}
                        role={"img"}
                      />
                    </div>
                  </div>
                </section>
              </section>
              {(() => {
                const child$Props = {
                  activeKey: generateStateValueProp($state, [
                    "accordion4",
                    "activePanelId"
                  ]),
                  bordered: true,
                  className: classNames("__wab_instance", sty.accordion4),
                  items: (
                    <React.Fragment>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem___7Ruy1
                        )}
                        id={1}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___8WDDo
                            )}
                          >
                            {
                              "Bagaimana caranya & syarat-syarat untuk pembukaan distributor atau waralaba dengan uwinflay? "
                            }
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fjPks
                          )}
                        >
                          {"First Children"}
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__uymBv
                        )}
                        id={2}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ivHkG
                            )}
                          >
                            {"Apakah bisa buka toko di rumah sendiri? "}
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ccf1H
                          )}
                        >
                          {"Second Children"}
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__jhRuU
                        )}
                        id={"3"}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wEWpj
                            )}
                          >
                            {
                              "Apakah barang diantar sampai toko & bagaimana dengan ongkos kirimnya? "
                            }
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oab2R
                          )}
                        >
                          {"Second Children"}
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__h7ZVl
                        )}
                        id={"4"}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__f0ZJ
                            )}
                          >
                            {"Apakah ada minimal pemesanan? "}
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mnuUe
                          )}
                        >
                          {"Second Children"}
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__ncxg5
                        )}
                        id={"5"}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___2XVc9
                            )}
                          >
                            {
                              "Apakah harganya lebih murah dibandingkan distributor? "
                            }
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wsyGt
                          )}
                        >
                          {"Second Children"}
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem___7ACze
                        )}
                        id={"6"}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__h0GMx
                            )}
                          >
                            {
                              "Apakah tokonya menggunakan nama uwinflay? Berapa lama waktu sampai buka toko? "
                            }
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__siI3I
                          )}
                        >
                          {"Second Children"}
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__vFVum
                        )}
                        id={"7"}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bg7XX
                            )}
                          >
                            {"Apakah boleh berjualan produk lain?"}
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zLkeA
                          )}
                        >
                          {"Second Children"}
                        </div>
                      </AntdAccordionItem>
                    </React.Fragment>
                  ),
                  onChange: generateStateOnChangePropForCodeComponents(
                    $state,
                    "activePanelId",
                    ["accordion4", "activePanelId"],
                    AntdAccordion_Helpers
                  )
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "activePanelId",
                      plasmicStateName: "accordion4.activePanelId"
                    }
                  ],
                  [],
                  AntdAccordion_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdAccordion
                    data-plasmic-name={"accordion4"}
                    data-plasmic-override={overrides.accordion4}
                    {...child$Props}
                  />
                );
              })()}
            </section>
          ) : null}
          <FooterMain
            data-plasmic-name={"footerMain"}
            data-plasmic-override={overrides.footerMain}
            className={classNames("__wab_instance", sty.footerMain)}
          />

          <section className={classNames(projectcss.all, sty.section__jxUFe)}>
            <div className={classNames(projectcss.all, sty.columns__jkwJb)}>
              <div className={classNames(projectcss.all, sty.column__eUeyZ)}>
                <div className={classNames(projectcss.all, sty.columns__znzFe)}>
                  <div
                    className={classNames(projectcss.all, sty.column__bNPt0)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eQ1Uc
                      )}
                    >
                      {"Pembayaran :"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__cYPwG)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__qBwbb)}
                      displayHeight={"80px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/uwinfly/images/_1646110410MandiriVapng.png",
                        fullWidth: 257,
                        fullHeight: 225,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__gR3P7)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__auA5X)}
                      displayHeight={"62px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/uwinfly/images/bcApng.png",
                        fullWidth: 257,
                        fullHeight: 225,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__vl3Wh)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__uyEm6)}
                      displayHeight={"66px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/uwinfly/images/download1Png.png",
                        fullWidth: 257,
                        fullHeight: 225,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column___8DIrI)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__iOgZ4)}
                      displayHeight={"80px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/uwinfly/images/downloadpng.png",
                        fullWidth: 225,
                        fullHeight: 225,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
              </div>
            </div>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navigationBar",
    "link1",
    "link2",
    "link3",
    "link4",
    "link5",
    "link6",
    "h2",
    "form3",
    "button2",
    "embedHtml",
    "clientsSection6",
    "form2",
    "accordion2",
    "accordion3",
    "accordion4",
    "footerMain"
  ],
  navigationBar: [
    "navigationBar",
    "link1",
    "link2",
    "link3",
    "link4",
    "link5",
    "link6"
  ],
  link1: ["link1"],
  link2: ["link2"],
  link3: ["link3"],
  link4: ["link4"],
  link5: ["link5"],
  link6: ["link6"],
  h2: ["h2"],
  form3: ["form3", "button2"],
  button2: ["button2"],
  embedHtml: ["embedHtml"],
  clientsSection6: ["clientsSection6", "form2", "accordion2"],
  form2: ["form2"],
  accordion2: ["accordion2"],
  accordion3: ["accordion3"],
  accordion4: ["accordion4"],
  footerMain: ["footerMain"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  link1: typeof Link1;
  link2: typeof Link2;
  link3: typeof Link3;
  link4: typeof Link4;
  link5: typeof Link5;
  link6: typeof Link6;
  h2: "h2";
  form3: typeof FormWrapper;
  button2: typeof Button2;
  embedHtml: typeof Embed;
  clientsSection6: "div";
  form2: typeof FormWrapper;
  accordion2: typeof AntdAccordion;
  accordion3: typeof AntdAccordion;
  accordion4: typeof AntdAccordion;
  footerMain: typeof FooterMain;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicKotakKami__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicKotakKami__VariantsArgs;
    args?: PlasmicKotakKami__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicKotakKami__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicKotakKami__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicKotakKami__ArgProps,
          internalVariantPropNames: PlasmicKotakKami__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicKotakKami__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicKotakKami";
  } else {
    func.displayName = `PlasmicKotakKami.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"iWaiTLt8mAup4ReehswsSx"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "iWaiTLt8mAup4ReehswsSx"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicKotakKami = Object.assign(
  // Top-level PlasmicKotakKami renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    link1: makeNodeComponent("link1"),
    link2: makeNodeComponent("link2"),
    link3: makeNodeComponent("link3"),
    link4: makeNodeComponent("link4"),
    link5: makeNodeComponent("link5"),
    link6: makeNodeComponent("link6"),
    h2: makeNodeComponent("h2"),
    form3: makeNodeComponent("form3"),
    button2: makeNodeComponent("button2"),
    embedHtml: makeNodeComponent("embedHtml"),
    clientsSection6: makeNodeComponent("clientsSection6"),
    form2: makeNodeComponent("form2"),
    accordion2: makeNodeComponent("accordion2"),
    accordion3: makeNodeComponent("accordion3"),
    accordion4: makeNodeComponent("accordion4"),
    footerMain: makeNodeComponent("footerMain"),

    // Metadata about props expected for PlasmicKotakKami
    internalVariantProps: PlasmicKotakKami__VariantProps,
    internalArgProps: PlasmicKotakKami__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "kotak kami",
      description: "produk uwinfly motor listrik sepeda listrik ",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicKotakKami;
/* prettier-ignore-end */

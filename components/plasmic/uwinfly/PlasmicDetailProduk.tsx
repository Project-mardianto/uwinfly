// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iWaiTLt8mAup4ReehswsSx
// Component: hJIhlFEA_DDU

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import Link1 from "../../Link1"; // plasmic-import: Wk3pm7NzsIY9/component
import Link2 from "../../Link2"; // plasmic-import: f0ftlBRhAHPN/component
import Link3 from "../../Link3"; // plasmic-import: P6OuWwiFq4gQ/component
import Link4 from "../../Link4"; // plasmic-import: b5zzKfYNksQk/component
import Link5 from "../../Link5"; // plasmic-import: jy_zqM-l3sYE/component
import Link6 from "../../Link6"; // plasmic-import: qdfwHKfwtv8_/component
import Button from "../../Button"; // plasmic-import: f3lmI1Q2JQuQ/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import { ProductBox } from "@plasmicpkgs/commerce";
import { ProductMedia } from "@plasmicpkgs/commerce";
import { ProductSlider } from "@plasmicpkgs/commerce";
import { ProductTextField } from "@plasmicpkgs/commerce";
import { ProductVariantPicker } from "@plasmicpkgs/commerce";
import { ProductQuantity } from "@plasmicpkgs/commerce";
import { ProductPriceComponent } from "@plasmicpkgs/commerce";
import Button2 from "../../Button2"; // plasmic-import: bn8Yy5q1VEYE/component
import FooterMain from "../../FooterMain"; // plasmic-import: qoZVCK7paFuV/component
import IconNavbar2 from "../../IconNavbar2"; // plasmic-import: 8dJjOz6ixDRs/component
import { PlasmicHead } from "@plasmicapp/react-web";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantssppb0UOhrN5L } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Sppb0uOhrN5l/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: iWaiTLt8mAup4ReehswsSx/projectcss
import sty from "./PlasmicDetailProduk.module.css"; // plasmic-import: hJIhlFEA_DDU/css

import ProfileCircleSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__ProfileCircleSvgrepoCom1Svg"; // plasmic-import: 0qa3aoynIlk5/icon
import BestSellersvgIcon from "./icons/PlasmicIcon__BestSellersvg"; // plasmic-import: gEr3vmMDIr_A/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: q0SxIWf05NzX/icon
import MotorcyclesvgIcon from "./icons/PlasmicIcon__Motorcyclesvg"; // plasmic-import: bB21gLC1MPi2/icon
import PinsvgIcon from "./icons/PlasmicIcon__Pinsvg"; // plasmic-import: d5Rc8pnBZxlJ/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: Fvg9iqGVtOYx/icon
import Home8SvgrepoComsvgIcon from "./icons/PlasmicIcon__Home8SvgrepoComsvg"; // plasmic-import: -M_rLtuPSxCT/icon
import MotorcycleBikeSvgrepoComsvgIcon from "./icons/PlasmicIcon__MotorcycleBikeSvgrepoComsvg"; // plasmic-import: 8wmKCbwv8HSh/icon
import ChatRoundDotsSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__ChatRoundDotsSvgrepoCom1Svg"; // plasmic-import: 0ggQKe6ouxoP/icon
import UserSvgrepoComsvgIcon from "./icons/PlasmicIcon__UserSvgrepoComsvg"; // plasmic-import: xgFBstRMC0MY/icon

createPlasmicElementProxy;

export type PlasmicDetailProduk__VariantMembers = {};
export type PlasmicDetailProduk__VariantsArgs = {};
type VariantPropType = keyof PlasmicDetailProduk__VariantsArgs;
export const PlasmicDetailProduk__VariantProps = new Array<VariantPropType>();

export type PlasmicDetailProduk__ArgsType = {};
type ArgPropType = keyof PlasmicDetailProduk__ArgsType;
export const PlasmicDetailProduk__ArgProps = new Array<ArgPropType>();

export type PlasmicDetailProduk__OverridesType = {
  root?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
  link1?: Flex__<typeof Link1>;
  link2?: Flex__<typeof Link2>;
  link3?: Flex__<typeof Link3>;
  link4?: Flex__<typeof Link4>;
  link5?: Flex__<typeof Link5>;
  link6?: Flex__<typeof Link6>;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  productBox?: Flex__<typeof ProductBox>;
  productSlider?: Flex__<typeof ProductSlider>;
  textbox?: Flex__<"input">;
  textbox2?: Flex__<"input">;
  textbox4?: Flex__<"input">;
  button2?: Flex__<typeof Button2>;
  footerMain?: Flex__<typeof FooterMain>;
  iconNavbar2?: Flex__<typeof IconNavbar2>;
  pageMetadataOverride?: Flex__<typeof PlasmicHead>;
};

export interface DefaultDetailProdukProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDetailProduk__RenderFunc(props: {
  variants: PlasmicDetailProduk__VariantsArgs;
  args: PlasmicDetailProduk__ArgsType;
  overrides: PlasmicDetailProduk__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "textbox.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "textbox2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => `1${undefined}`
      },
      {
        path: "textbox4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => `1${undefined}`
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssppb0UOhrN5L()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicDetailProduk.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicDetailProduk.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicDetailProduk.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicDetailProduk.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicDetailProduk.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicDetailProduk.pageMetadata.description}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section className={classNames(projectcss.all, sty.section__bRke)}>
            <NavigationBar
              data-plasmic-name={"navigationBar"}
              data-plasmic-override={overrides.navigationBar}
              brand={
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___1JyOx
                  )}
                  component={Link}
                  href={`/`}
                  platform={"nextjs"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___9O81L)}
                    displayHeight={"100px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={{
                      src: "/plasmic/uwinfly/images/logopng.png",
                      fullWidth: 512,
                      fullHeight: 512,
                      aspectRatio: undefined
                    }}
                  />
                </PlasmicLink__>
              }
              className={classNames("__wab_instance", sty.navigationBar)}
              closeButton={
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__tQzMl)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "20px"
                      : "auto"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "20px"
                      : "auto"
                  }
                  src={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? {
                          src: "/plasmic/uwinfly/images/_3F1C0155019E22Ca2146D6372Fa054D8Svg.svg",
                          fullWidth: 150,
                          fullHeight: 150,
                          aspectRatio: 1
                        }
                      : "https://static1.plasmic.app/close.svg"
                  }
                />
              }
              forceOpenMenu={
                hasVariant(globalVariants, "screen", "mobile")
                  ? false
                  : undefined
              }
              itemsGap={hasVariant(globalVariants, "screen", "mobile") ? 8 : 8}
              menuItems={
                <React.Fragment>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__dq21J
                    )}
                    component={Link}
                    href={`/`}
                    platform={"nextjs"}
                  >
                    <Link1
                      data-plasmic-name={"link1"}
                      data-plasmic-override={overrides.link1}
                      className={classNames("__wab_instance", sty.link1)}
                    />
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__yGnvw
                    )}
                    component={Link}
                    href={`/about-us`}
                    platform={"nextjs"}
                  >
                    <Link2
                      data-plasmic-name={"link2"}
                      data-plasmic-override={overrides.link2}
                      className={classNames("__wab_instance", sty.link2)}
                    />
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__z6BhK
                    )}
                    component={Link}
                    href={`/Mitra`}
                    platform={"nextjs"}
                  >
                    <Link3
                      data-plasmic-name={"link3"}
                      data-plasmic-override={overrides.link3}
                      className={classNames("__wab_instance", sty.link3)}
                    />
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__tCyMx
                    )}
                    component={Link}
                    href={`/Blog`}
                    platform={"nextjs"}
                  >
                    <Link4
                      data-plasmic-name={"link4"}
                      data-plasmic-override={overrides.link4}
                      className={classNames("__wab_instance", sty.link4)}
                    />
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__lSt5E
                    )}
                    component={Link}
                    href={`/persyaratan`}
                    platform={"nextjs"}
                  >
                    <Link5
                      data-plasmic-name={"link5"}
                      data-plasmic-override={overrides.link5}
                      className={classNames("__wab_instance", sty.link5)}
                    />
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__mlHc2
                    )}
                    component={Link}
                    href={`/Kontak-kami`}
                    platform={"nextjs"}
                  >
                    <Link6
                      data-plasmic-name={"link6"}
                      data-plasmic-override={overrides.link6}
                      className={classNames("__wab_instance", sty.link6)}
                    />
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__eyVk6
                    )}
                    component={Link}
                    href={`/Profile`}
                    platform={"nextjs"}
                  >
                    <ProfileCircleSvgrepoCom1SvgIcon
                      className={classNames(projectcss.all, sty.svg__sBDx9)}
                      role={"img"}
                    />
                  </PlasmicLink__>
                </React.Fragment>
              }
              openButton={
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__sIbVb)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "25px"
                      : "35px"
                  }
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  src={{
                    src: "/plasmic/uwinfly/images/iconsvg.svg",
                    fullWidth: 231,
                    fullHeight: 150,
                    aspectRatio: 1.537966
                  }}
                />
              }
              responsiveBreakpoint={768}
            />

            <section className={classNames(projectcss.all, sty.section__t0Zlt)}>
              <div className={classNames(projectcss.all, sty.columns__fvw0X)}>
                <div
                  className={classNames(projectcss.all, sty.column__umfMg)}
                />

                <div
                  className={classNames(projectcss.all, sty.column___0Gs8D)}
                />
              </div>
            </section>
          </section>
          <section className={classNames(projectcss.all, sty.section__mYcF)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__fmByp)}
            >
              <div className={classNames(projectcss.all, sty.column__c9Nk9)}>
                <Button
                  className={classNames("__wab_instance", sty.button__wemA)}
                  showStartIcon={true}
                  startIcon={
                    <BestSellersvgIcon
                      className={classNames(projectcss.all, sty.svg___0H9F)}
                      role={"img"}
                    />
                  }
                >
                  {"Best seller"}
                </Button>
              </div>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.column___7A2OY
                )}
                component={Link}
                href={`/Produk`}
                platform={"nextjs"}
              >
                <Button
                  className={classNames("__wab_instance", sty.button__ib3Q9)}
                  showStartIcon={true}
                  startIcon={
                    <MotorcyclesvgIcon
                      className={classNames(projectcss.all, sty.svg__pkId)}
                      role={"img"}
                    />
                  }
                >
                  {"Produk"}
                </Button>
              </PlasmicLink__>
              <div className={classNames(projectcss.all, sty.column__k9HfW)}>
                <Button
                  className={classNames("__wab_instance", sty.button__f1Xm5)}
                  link={`/Service`}
                  showStartIcon={true}
                  startIcon={
                    <PinsvgIcon
                      className={classNames(projectcss.all, sty.svg__g7W63)}
                      role={"img"}
                    />
                  }
                >
                  {"Service"}
                </Button>
              </div>
            </Stack__>
          </section>
          <section className={classNames(projectcss.all, sty.section__c6FOo)}>
            <div className={classNames(projectcss.all, sty.columns__x6NQg)}>
              <div className={classNames(projectcss.all, sty.column__viyp0)}>
                <Button
                  className={classNames("__wab_instance", sty.button__hBfTs)}
                  showStartIcon={true}
                >
                  {"Best seller"}
                </Button>
              </div>
              <div className={classNames(projectcss.all, sty.column___201Pk)}>
                <Button
                  className={classNames("__wab_instance", sty.button__ilqW0)}
                  showStartIcon={true}
                  startIcon={
                    <BestSellersvgIcon
                      className={classNames(projectcss.all, sty.svg__xudCx)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vhYz
                    )}
                  >
                    {"Best seller"}
                  </div>
                </Button>
              </div>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.column__rhgMi
                )}
                component={Link}
                platform={"nextjs"}
              >
                <Button
                  className={classNames("__wab_instance", sty.button__vbODx)}
                  showStartIcon={true}
                  startIcon={
                    <MotorcyclesvgIcon
                      className={classNames(projectcss.all, sty.svg__sw0Lk)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xU3Kq
                    )}
                  >
                    {"Produk"}
                  </div>
                </Button>
              </PlasmicLink__>
              <div className={classNames(projectcss.all, sty.column__wbVd4)}>
                <Button
                  className={classNames("__wab_instance", sty.button__vymtX)}
                  link={`/Service`}
                  showStartIcon={true}
                  startIcon={
                    <PinsvgIcon
                      className={classNames(projectcss.all, sty.svg__mLp8L)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rwcff
                    )}
                  >
                    {"Service"}
                  </div>
                </Button>
              </div>
            </div>
          </section>
          <section className={classNames(projectcss.all, sty.section__dQcD)}>
            {(() => {
              const child$Props = {
                arrows: hasVariant(globalVariants, "screen", "mobile")
                  ? false
                  : false,
                beforeChange: generateStateOnChangePropForCodeComponents(
                  $state,
                  "currentSlide",
                  ["sliderCarousel", "currentSlide"],
                  SliderWrapper_Helpers
                ),
                className: classNames("__wab_instance", sty.sliderCarousel),
                dots: hasVariant(globalVariants, "screen", "mobile")
                  ? false
                  : false,
                infinite: hasVariant(globalVariants, "screen", "mobile")
                  ? true
                  : undefined,
                initialSlide: generateStateValueProp($state, [
                  "sliderCarousel",
                  "currentSlide"
                ]),
                ref: ref => {
                  $refs["sliderCarousel"] = ref;
                },
                sliderScopeClassName: sty["sliderCarousel__slider"]
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "currentSlide",
                    plasmicStateName: "sliderCarousel.currentSlide"
                  }
                ],
                [],
                SliderWrapper_Helpers ?? {},
                child$Props
              );

              return (
                <SliderWrapper
                  data-plasmic-name={"sliderCarousel"}
                  data-plasmic-override={overrides.sliderCarousel}
                  {...child$Props}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vhTfS)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___9Dihc)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      src={{
                        src: "/plasmic/uwinfly/images/e00E689E0939496995E54166D89B65E3Jpgpng.png",
                        fullWidth: 1200,
                        fullHeight: 600,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__v5PPn)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__cbG8I)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      src={{
                        src: "/plasmic/uwinfly/images/_085E18C625204CccA77C3509D67Ed545Jpgpng.png",
                        fullWidth: 1200,
                        fullHeight: 600,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___1NQVp)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__dprAz)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      src={{
                        src: "/plasmic/uwinfly/images/_1E001B1D6Cab455E9Bcc641F3823Ed43Jpgpng.png",
                        fullWidth: 1200,
                        fullHeight: 599,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </SliderWrapper>
              );
            })()}
          </section>
          <section className={classNames(projectcss.all, sty.section__vapnT)}>
            <div className={classNames(projectcss.all, sty.columns___5Msy)}>
              <div className={classNames(projectcss.all, sty.column__sC38A)}>
                <Button
                  className={classNames("__wab_instance", sty.button__sRbNs)}
                  showStartIcon={true}
                  startIcon={
                    <BestSellersvgIcon
                      className={classNames(projectcss.all, sty.svg__bPrbp)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kjtWd
                    )}
                  >
                    {"Best seller"}
                  </div>
                </Button>
              </div>
              <div className={classNames(projectcss.all, sty.column__ppXyc)}>
                <Button
                  className={classNames("__wab_instance", sty.button__dVtO6)}
                  showStartIcon={true}
                  startIcon={
                    <BestSellersvgIcon
                      className={classNames(projectcss.all, sty.svg__hnDvm)}
                      role={"img"}
                    />
                  }
                >
                  {"Best seller"}
                </Button>
              </div>
              <div className={classNames(projectcss.all, sty.column__tHr57)}>
                <Button
                  className={classNames("__wab_instance", sty.button__br4V)}
                  showStartIcon={true}
                  startIcon={
                    <MotorcyclesvgIcon
                      className={classNames(projectcss.all, sty.svg__kmClX)}
                      role={"img"}
                    />
                  }
                >
                  {"Best seller"}
                </Button>
              </div>
              <div className={classNames(projectcss.all, sty.column__tZGb0)}>
                <Button
                  className={classNames("__wab_instance", sty.button___7I7Yi)}
                  showStartIcon={true}
                  startIcon={
                    <BestSellersvgIcon
                      className={classNames(projectcss.all, sty.svg__kxPbe)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gXvm5
                    )}
                  >
                    {"Best seller"}
                  </div>
                </Button>
              </div>
              <div className={classNames(projectcss.all, sty.column___4SqIo)}>
                <Button
                  className={classNames("__wab_instance", sty.button__uJ3Jf)}
                  showStartIcon={true}
                  startIcon={
                    <MotorcyclesvgIcon
                      className={classNames(projectcss.all, sty.svg__vuvo4)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ub8Vz
                    )}
                  >
                    {"Produk"}
                  </div>
                </Button>
              </div>
              <div className={classNames(projectcss.all, sty.column___5XsSa)}>
                <Button
                  className={classNames("__wab_instance", sty.button__nxls1)}
                  showStartIcon={true}
                  startIcon={
                    <PinsvgIcon
                      className={classNames(projectcss.all, sty.svg__dLo6B)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aNmeX
                    )}
                  >
                    {"Lokasi"}
                  </div>
                </Button>
              </div>
              <div className={classNames(projectcss.all, sty.column___8Sk0T)}>
                <Button
                  className={classNames("__wab_instance", sty.button__yi2A)}
                  showStartIcon={true}
                  startIcon={
                    <MotorcyclesvgIcon
                      className={classNames(projectcss.all, sty.svg__clNuF)}
                      role={"img"}
                    />
                  }
                >
                  {"Lokasi"}
                </Button>
              </div>
              <div className={classNames(projectcss.all, sty.column__t79Gd)}>
                <Button
                  className={classNames("__wab_instance", sty.button__v8MoJ)}
                  showStartIcon={true}
                  startIcon={
                    <PinsvgIcon
                      className={classNames(projectcss.all, sty.svg__iphP)}
                      role={"img"}
                    />
                  }
                >
                  {"Lokasi"}
                </Button>
              </div>
            </div>
          </section>
          <section className={classNames(projectcss.all, sty.section__jRtZm)}>
            <div className={classNames(projectcss.all, sty.columns__sdIkz)}>
              <div className={classNames(projectcss.all, sty.column___3BoPq)}>
                <ProductBox
                  data-plasmic-name={"productBox"}
                  data-plasmic-override={overrides.productBox}
                  className={classNames("__wab_instance", sty.productBox)}
                  id={(() => {
                    try {
                      return $ctx.params.slug;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <DataCtxReader__>
                    {$ctx => (
                      <React.Fragment>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__b8Rhe
                          )}
                        >
                          <ProductMedia
                            className={classNames(
                              "__wab_instance",
                              sty.productMedia__b93Ax
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___80Nb8
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return undefined;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__m4Wo1
                          )}
                        >
                          <ProductSlider
                            data-plasmic-name={"productSlider"}
                            data-plasmic-override={overrides.productSlider}
                            className={classNames(
                              "__wab_instance",
                              sty.productSlider
                            )}
                            slideContainer={
                              <DataCtxReader__>
                                {$ctx => (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__iq887
                                    )}
                                  >
                                    <ProductMedia
                                      className={classNames(
                                        "__wab_instance",
                                        sty.productMedia__ivnU6
                                      )}
                                    />
                                  </div>
                                )}
                              </DataCtxReader__>
                            }
                            slideSelected={2}
                            thumbsContainer={
                              <DataCtxReader__>
                                {$ctx => (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__wYEnh
                                    )}
                                  >
                                    <ProductMedia
                                      className={classNames(
                                        "__wab_instance",
                                        sty.productMedia__bdQfo
                                      )}
                                    />
                                  </div>
                                )}
                              </DataCtxReader__>
                            }
                            thumbsVisible={4}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.columns__g2ON
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__xc3Ix
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__xdQ5X
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                ) ? (
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "var(--token-RvPI6LyeIPmd)"
                                      }}
                                    >
                                      {"Produk"}
                                    </span>
                                  </React.Fragment>
                                ) : (
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "var(--token-RvPI6LyeIPmd)"
                                      }}
                                    >
                                      {"Produk"}
                                    </span>
                                  </React.Fragment>
                                )}
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column___719Z0
                              )}
                            >
                              <ProductTextField
                                className={classNames(
                                  "__wab_instance",
                                  sty.productTextField__lz8Xn
                                )}
                                field={"name"}
                              />

                              <ProductTextField
                                className={classNames(
                                  "__wab_instance",
                                  sty.productTextField___1Ccif
                                )}
                                field={"sku"}
                              />
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.columns__uYc6K
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__cGrby
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___5Qr5P
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                ) ? (
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "var(--token-RvPI6LyeIPmd)"
                                      }}
                                    >
                                      {"Terjual"}
                                    </span>
                                  </React.Fragment>
                                ) : (
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "var(--token-RvPI6LyeIPmd)"
                                      }}
                                    >
                                      {"Deskripsi produk"}
                                    </span>
                                  </React.Fragment>
                                )}
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__lYgZl
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__xbNn8
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.currentProduct.description;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.columns__pspLy
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__x5Wnw
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__q6Lw1
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                ) ? (
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "var(--token-RvPI6LyeIPmd)"
                                      }}
                                    >
                                      {"Pengiriman"}
                                    </span>
                                  </React.Fragment>
                                ) : (
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "var(--token-RvPI6LyeIPmd)"
                                      }}
                                    >
                                      {"Varian"}
                                    </span>
                                  </React.Fragment>
                                )}
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__aldzd
                              )}
                            >
                              <ProductVariantPicker
                                className={classNames(
                                  "__wab_instance",
                                  sty.productVariantPicker__oxlWl
                                )}
                              />
                            </div>
                          </div>
                          {(
                            hasVariant(globalVariants, "screen", "mobile")
                              ? true
                              : false
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.columns__kMen
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__pioW5
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__rBeH9
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobile"
                                  ) ? (
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{
                                          color: "var(--token-RvPI6LyeIPmd)"
                                        }}
                                      >
                                        {"Pengiriman"}
                                      </span>
                                    </React.Fragment>
                                  ) : (
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{
                                          color: "var(--token-RvPI6LyeIPmd)"
                                        }}
                                      >
                                        {"Produk"}
                                      </span>
                                    </React.Fragment>
                                  )}
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__bHqA
                                )}
                              >
                                <ProductTextField
                                  className={classNames(
                                    "__wab_instance",
                                    sty.productTextField__mcfAn
                                  )}
                                  field={"name"}
                                />

                                <ProductTextField
                                  className={classNames(
                                    "__wab_instance",
                                    sty.productTextField__zeTtY
                                  )}
                                  field={"description"}
                                />

                                <ProductQuantity
                                  className={classNames(
                                    "__wab_instance",
                                    sty.productQuantity__ljsFd
                                  )}
                                >
                                  <input
                                    data-plasmic-name={"textbox"}
                                    data-plasmic-override={overrides.textbox}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.input,
                                      sty.textbox
                                    )}
                                    onChange={e => {
                                      generateStateOnChangeProp($state, [
                                        "textbox",
                                        "value"
                                      ])(e.target.value);
                                    }}
                                    ref={ref => {
                                      $refs["textbox"] = ref;
                                    }}
                                    size={1}
                                    type={"text"}
                                    value={
                                      generateStateValueProp($state, [
                                        "textbox",
                                        "value"
                                      ]) ?? ""
                                    }
                                  />
                                </ProductQuantity>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__keo1P
                                  )}
                                >
                                  {"Wahana"}
                                </div>
                              </div>
                            </div>
                          ) : null}
                          {(
                            hasVariant(globalVariants, "screen", "mobile")
                              ? true
                              : false
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.columns__b8Clv
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__r95El
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___3ZSu2
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobile"
                                  ) ? (
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{
                                          color: "var(--token-RvPI6LyeIPmd)"
                                        }}
                                      >
                                        {"Variasi"}
                                      </span>
                                    </React.Fragment>
                                  ) : (
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{
                                          color: "var(--token-RvPI6LyeIPmd)"
                                        }}
                                      >
                                        {"Produk"}
                                      </span>
                                    </React.Fragment>
                                  )}
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__xpQZs
                                )}
                              >
                                <ProductTextField
                                  className={classNames(
                                    "__wab_instance",
                                    sty.productTextField__lqVK
                                  )}
                                  field={"name"}
                                />

                                <ProductTextField
                                  className={classNames(
                                    "__wab_instance",
                                    sty.productTextField__j0YAu
                                  )}
                                  field={"description"}
                                />

                                <ProductQuantity
                                  className={classNames(
                                    "__wab_instance",
                                    sty.productQuantity___7AOuS
                                  )}
                                >
                                  <input
                                    data-plasmic-name={"textbox2"}
                                    data-plasmic-override={overrides.textbox2}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.input,
                                      sty.textbox2
                                    )}
                                    disabled={false}
                                    onChange={e => {
                                      generateStateOnChangeProp($state, [
                                        "textbox2",
                                        "value"
                                      ])(e.target.value);
                                    }}
                                    placeholder={``}
                                    ref={ref => {
                                      $refs["textbox2"] = ref;
                                    }}
                                    size={1}
                                    type={"number"}
                                    value={
                                      generateStateValueProp($state, [
                                        "textbox2",
                                        "value"
                                      ]) ?? ""
                                    }
                                  />
                                </ProductQuantity>
                                <ProductVariantPicker
                                  className={classNames(
                                    "__wab_instance",
                                    sty.productVariantPicker__oaQm7
                                  )}
                                />
                              </div>
                            </div>
                          ) : null}
                          {(
                            hasVariant(globalVariants, "screen", "mobile")
                              ? true
                              : false
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.columns__mhTz
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__xbUx9
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___8SEmt
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobile"
                                  ) ? (
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{
                                          color: "var(--token-RvPI6LyeIPmd)"
                                        }}
                                      >
                                        {"QTY"}
                                      </span>
                                    </React.Fragment>
                                  ) : (
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{
                                          color: "var(--token-RvPI6LyeIPmd)"
                                        }}
                                      >
                                        {"Produk"}
                                      </span>
                                    </React.Fragment>
                                  )}
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__vuVg1
                                )}
                              >
                                <ProductTextField
                                  className={classNames(
                                    "__wab_instance",
                                    sty.productTextField__y2Dv5
                                  )}
                                  field={"name"}
                                />

                                <ProductTextField
                                  className={classNames(
                                    "__wab_instance",
                                    sty.productTextField__qxUxD
                                  )}
                                  field={"description"}
                                />

                                <ProductQuantity
                                  className={classNames(
                                    "__wab_instance",
                                    sty.productQuantity__lwOfx
                                  )}
                                >
                                  <input
                                    data-plasmic-name={"textbox4"}
                                    data-plasmic-override={overrides.textbox4}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.input,
                                      sty.textbox4
                                    )}
                                    disabled={false}
                                    onChange={e => {
                                      generateStateOnChangeProp($state, [
                                        "textbox4",
                                        "value"
                                      ])(e.target.value);
                                    }}
                                    placeholder={``}
                                    ref={ref => {
                                      $refs["textbox4"] = ref;
                                    }}
                                    size={1}
                                    type={"number"}
                                    value={
                                      generateStateValueProp($state, [
                                        "textbox4",
                                        "value"
                                      ]) ?? ""
                                    }
                                  />
                                </ProductQuantity>
                              </div>
                            </div>
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.columns___00Xsf
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__zdKd
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___5YoHj
                                )}
                              >
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ color: "rgba(0, 0, 0, 0.85)" }}
                                  >
                                    {"Harga"}
                                  </span>
                                </React.Fragment>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__xczD6
                              )}
                            >
                              <ProductPriceComponent
                                className={classNames(
                                  "__wab_instance",
                                  sty.productPrice__cwUho
                                )}
                              />
                            </div>
                          </div>
                          {(
                            hasVariant(globalVariants, "screen", "mobile")
                              ? true
                              : false
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.columns__aagO
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__v6K7
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__xYo76
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobile"
                                  ) ? (
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{
                                          color: "var(--token-RvPI6LyeIPmd)"
                                        }}
                                      >
                                        {"Produk"}
                                      </span>
                                    </React.Fragment>
                                  ) : (
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{
                                          color: "var(--token-RvPI6LyeIPmd)"
                                        }}
                                      >
                                        {"Deskripsi produk"}
                                      </span>
                                    </React.Fragment>
                                  )}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__axwB
                                  )}
                                >
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "var(--token-RvPI6LyeIPmd)"
                                      }}
                                    >
                                      {"Deskripsi produk"}
                                    </span>
                                  </React.Fragment>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__fpX6I
                                )}
                              >
                                <ProductTextField
                                  className={classNames(
                                    "__wab_instance",
                                    sty.productTextField__osJy
                                  )}
                                  field={"description"}
                                />

                                <ProductTextField
                                  className={classNames(
                                    "__wab_instance",
                                    sty.productTextField__q8GWf
                                  )}
                                  field={"name"}
                                />
                              </div>
                            </div>
                          ) : null}
                          {(
                            hasVariant(globalVariants, "screen", "mobile")
                              ? true
                              : false
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.columns__b8WMk
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__jvOct
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__kc4T
                                  )}
                                >
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "var(--token-RvPI6LyeIPmd)"
                                      }}
                                    >
                                      {"Deskripsi produk"}
                                    </span>
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__hvhY4
                                  )}
                                >
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "var(--token-RvPI6LyeIPmd)"
                                      }}
                                    >
                                      {"Deskripsi produk"}
                                    </span>
                                  </React.Fragment>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__lMrO0
                                )}
                              >
                                <ProductTextField
                                  className={classNames(
                                    "__wab_instance",
                                    sty.productTextField__uaFE
                                  )}
                                  field={"description"}
                                />

                                <ProductTextField
                                  className={classNames(
                                    "__wab_instance",
                                    sty.productTextField__xpDsJ
                                  )}
                                  field={"name"}
                                />
                              </div>
                            </div>
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.columns__gLkIg
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__sg6Td
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ab5Wm
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                ) ? (
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "var(--token-RvPI6LyeIPmd)"
                                      }}
                                    >
                                      {"Varian"}
                                    </span>
                                  </React.Fragment>
                                ) : (
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "var(--token-RvPI6LyeIPmd)"
                                      }}
                                    >
                                      {"Deskripsi produk"}
                                    </span>
                                  </React.Fragment>
                                )}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___4T46N
                                )}
                              >
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{
                                      color: "var(--token-RvPI6LyeIPmd)"
                                    }}
                                  >
                                    {"Deskripsi produk"}
                                  </span>
                                </React.Fragment>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__cHiVy
                              )}
                            >
                              <ProductTextField
                                className={classNames(
                                  "__wab_instance",
                                  sty.productTextField__aETi6
                                )}
                                field={"description"}
                              />

                              <ProductTextField
                                className={classNames(
                                  "__wab_instance",
                                  sty.productTextField__mcGRw
                                )}
                                field={"name"}
                              />

                              <ProductVariantPicker
                                className={classNames(
                                  "__wab_instance",
                                  sty.productVariantPicker__nbPPb
                                )}
                              />
                            </div>
                          </div>
                          {(
                            hasVariant(globalVariants, "screen", "mobile")
                              ? true
                              : false
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.columns__noqZp
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__fPjYv
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__eus3
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobile"
                                  ) ? (
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{
                                          color: "var(--token-RvPI6LyeIPmd)"
                                        }}
                                      >
                                        {"Harga"}
                                      </span>
                                    </React.Fragment>
                                  ) : (
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{
                                          color: "var(--token-RvPI6LyeIPmd)"
                                        }}
                                      >
                                        {"Deskripsi produk"}
                                      </span>
                                    </React.Fragment>
                                  )}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__g6OQc
                                  )}
                                >
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "var(--token-RvPI6LyeIPmd)"
                                      }}
                                    >
                                      {"Deskripsi produk"}
                                    </span>
                                  </React.Fragment>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__fcyDf
                                )}
                              >
                                <ProductTextField
                                  className={classNames(
                                    "__wab_instance",
                                    sty.productTextField__gayD0
                                  )}
                                  field={"description"}
                                />

                                <ProductTextField
                                  className={classNames(
                                    "__wab_instance",
                                    sty.productTextField__jHket
                                  )}
                                  field={"name"}
                                />

                                <ProductPriceComponent
                                  className={classNames(
                                    "__wab_instance",
                                    sty.productPrice__oE81C
                                  )}
                                />
                              </div>
                            </div>
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.columns__ubgA4
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__aiAsH
                              )}
                            >
                              <Button2
                                data-plasmic-name={"button2"}
                                data-plasmic-override={overrides.button2}
                                className={classNames(
                                  "__wab_instance",
                                  sty.button2
                                )}
                                size={
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? "compact"
                                    : "compact"
                                }
                              >
                                {hasVariant(globalVariants, "screen", "mobile")
                                  ? "Beli"
                                  : "Beli"}
                              </Button2>
                            </div>
                          </div>
                          <ProductVariantPicker
                            className={classNames(
                              "__wab_instance",
                              sty.productVariantPicker___0Crx0
                            )}
                          />
                        </div>
                      </React.Fragment>
                    )}
                  </DataCtxReader__>
                </ProductBox>
              </div>
            </div>
          </section>
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <section className={classNames(projectcss.all, sty.section__eg0Zx)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__usOwj
                )}
              >
                {"Pertanyaan yang di ajukan"}
              </div>
            </section>
          ) : null}
          <FooterMain
            data-plasmic-name={"footerMain"}
            data-plasmic-override={overrides.footerMain}
            className={classNames("__wab_instance", sty.footerMain)}
          />

          <section className={classNames(projectcss.all, sty.section__ofqNe)}>
            <div className={classNames(projectcss.all, sty.columns__omHt7)}>
              <div className={classNames(projectcss.all, sty.column__ubDnK)}>
                <div className={classNames(projectcss.all, sty.columns___1AC)}>
                  <div
                    className={classNames(projectcss.all, sty.column__sEfOo)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__relPt
                      )}
                    >
                      {"Pembayaran :"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column___9NdyJ)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___0Gv2M)}
                      displayHeight={"80px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/uwinfly/images/_1646110410MandiriVapng.png",
                        fullWidth: 257,
                        fullHeight: 225,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__gkXpN)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__mu6Xu)}
                      displayHeight={"62px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/uwinfly/images/bcApng.png",
                        fullWidth: 257,
                        fullHeight: 225,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__hR3Cn)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___8VnF)}
                      displayHeight={"66px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/uwinfly/images/download1Png.png",
                        fullWidth: 257,
                        fullHeight: 225,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div className={classNames(projectcss.all, sty.column__pBdn)}>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__upCRr)}
                      displayHeight={"80px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/uwinfly/images/downloadpng.png",
                        fullWidth: 225,
                        fullHeight: 225,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
              </div>
            </div>
          </section>
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <div className={classNames(projectcss.all, sty.freeBox__tGIfk)}>
              <div className={classNames(projectcss.all, sty.columns__wrNZn)}>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.column__tvxoE
                  )}
                  component={Link}
                  href={`/`}
                  platform={"nextjs"}
                >
                  <section
                    className={classNames(projectcss.all, sty.section__b8WMv)}
                  >
                    <IconNavbar2
                      data-plasmic-name={"iconNavbar2"}
                      data-plasmic-override={overrides.iconNavbar2}
                      className={classNames("__wab_instance", sty.iconNavbar2)}
                    />
                  </section>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__idThF
                    )}
                  >
                    {"Home"}
                  </div>
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.column__szBao
                  )}
                  component={Link}
                  href={`/`}
                  platform={"nextjs"}
                >
                  <section
                    className={classNames(projectcss.all, sty.section__j2Jeo)}
                  >
                    <Home8SvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__mvzla)}
                      role={"img"}
                    />
                  </section>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qQ0Ho
                    )}
                  >
                    {"Home"}
                  </div>
                </PlasmicLink__>
                <div className={classNames(projectcss.all, sty.column__kxIFn)}>
                  <section
                    className={classNames(projectcss.all, sty.section___10ST)}
                  >
                    <MotorcycleBikeSvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg___20V9O)}
                      role={"img"}
                    />
                  </section>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__neP6Y
                    )}
                  >
                    {"Promo"}
                  </div>
                </div>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.column__egzG
                  )}
                  component={Link}
                  href={`/chat`}
                  platform={"nextjs"}
                >
                  <section
                    className={classNames(projectcss.all, sty.section__uSf9R)}
                  >
                    <ChatRoundDotsSvgrepoCom1SvgIcon
                      className={classNames(projectcss.all, sty.svg__fKe1D)}
                      role={"img"}
                    />
                  </section>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aPq6W
                    )}
                  >
                    {"Chat"}
                  </div>
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.column___6KM8M
                  )}
                  component={Link}
                  href={`/Profile`}
                  platform={"nextjs"}
                >
                  <section
                    className={classNames(projectcss.all, sty.section__iZCop)}
                  >
                    <UserSvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg___8HmGy)}
                      role={"img"}
                    />
                  </section>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5X3Nc
                    )}
                  >
                    {"Profile"}
                  </div>
                </PlasmicLink__>
              </div>
            </div>
          ) : null}
          <PlasmicHead
            data-plasmic-name={"pageMetadataOverride"}
            data-plasmic-override={overrides.pageMetadataOverride}
            canonical={"https://uwinfly.co.id/uwinfly-t3s-pro"}
            className={classNames("__wab_instance", sty.pageMetadataOverride)}
            description={
              "Solusi tepat mempunyai dealer motor listrik dan sepeda listrik, uwinfly terjamin dan terpercaya untuk inventasi anda "
            }
            image={"/plasmic/uwinfly/images/logopng.png"}
            title={"uwinfly"}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navigationBar",
    "link1",
    "link2",
    "link3",
    "link4",
    "link5",
    "link6",
    "sliderCarousel",
    "productBox",
    "productSlider",
    "textbox",
    "textbox2",
    "textbox4",
    "button2",
    "footerMain",
    "iconNavbar2",
    "pageMetadataOverride"
  ],
  navigationBar: [
    "navigationBar",
    "link1",
    "link2",
    "link3",
    "link4",
    "link5",
    "link6"
  ],
  link1: ["link1"],
  link2: ["link2"],
  link3: ["link3"],
  link4: ["link4"],
  link5: ["link5"],
  link6: ["link6"],
  sliderCarousel: ["sliderCarousel"],
  productBox: [
    "productBox",
    "productSlider",
    "textbox",
    "textbox2",
    "textbox4",
    "button2"
  ],
  productSlider: ["productSlider"],
  textbox: ["textbox"],
  textbox2: ["textbox2"],
  textbox4: ["textbox4"],
  button2: ["button2"],
  footerMain: ["footerMain"],
  iconNavbar2: ["iconNavbar2"],
  pageMetadataOverride: ["pageMetadataOverride"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  link1: typeof Link1;
  link2: typeof Link2;
  link3: typeof Link3;
  link4: typeof Link4;
  link5: typeof Link5;
  link6: typeof Link6;
  sliderCarousel: typeof SliderWrapper;
  productBox: typeof ProductBox;
  productSlider: typeof ProductSlider;
  textbox: "input";
  textbox2: "input";
  textbox4: "input";
  button2: typeof Button2;
  footerMain: typeof FooterMain;
  iconNavbar2: typeof IconNavbar2;
  pageMetadataOverride: typeof PlasmicHead;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDetailProduk__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDetailProduk__VariantsArgs;
    args?: PlasmicDetailProduk__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDetailProduk__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDetailProduk__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDetailProduk__ArgProps,
          internalVariantPropNames: PlasmicDetailProduk__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDetailProduk__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDetailProduk";
  } else {
    func.displayName = `PlasmicDetailProduk.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"iWaiTLt8mAup4ReehswsSx"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "iWaiTLt8mAup4ReehswsSx"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicDetailProduk = Object.assign(
  // Top-level PlasmicDetailProduk renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    link1: makeNodeComponent("link1"),
    link2: makeNodeComponent("link2"),
    link3: makeNodeComponent("link3"),
    link4: makeNodeComponent("link4"),
    link5: makeNodeComponent("link5"),
    link6: makeNodeComponent("link6"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    productBox: makeNodeComponent("productBox"),
    productSlider: makeNodeComponent("productSlider"),
    textbox: makeNodeComponent("textbox"),
    textbox2: makeNodeComponent("textbox2"),
    textbox4: makeNodeComponent("textbox4"),
    button2: makeNodeComponent("button2"),
    footerMain: makeNodeComponent("footerMain"),
    iconNavbar2: makeNodeComponent("iconNavbar2"),
    pageMetadataOverride: makeNodeComponent("pageMetadataOverride"),

    // Metadata about props expected for PlasmicDetailProduk
    internalVariantProps: PlasmicDetailProduk__VariantProps,
    internalArgProps: PlasmicDetailProduk__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "uwinfly",
      description:
        "Solusi tepat mempunyai dealer motor listrik dan sepeda listrik, uwinfly terjamin dan terpercaya untuk inventasi anda ",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDetailProduk;
/* prettier-ignore-end */
